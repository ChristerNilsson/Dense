// Generated by CoffeeScript 2.7.0
var ALFABET, ASCII, COLORS, COST, DIFF, N, Player, RINGS, Tournament, XMAX, XMIN, ZOOM, assert, copyToClipboard, currentResult, currentTable, datum, downloadFile, elo_probabilities, errors, fakeInput, fixCanvas, handleDelete, handleResult, ints2strings, invert, message, myRound, normera, ok, other, prBoth, prRes, print, range, res2string, resultat, showType, state, sum, tournament, xdraw, xxx,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  parseExpr
} from './parser.js';

import {
  Edmonds
} from './mattkrick.js';


// parameters that somewhat affects matching
COST = 'QUADRATIC'; // QUADRATIC=1.01 or LINEAR=1

DIFF = 'ID'; // ID or ELO

COLORS = 1; // 1 or 2

RINGS = {
  'b': '•',
  'w': 'o'
};

print = console.log;

range = _.range;

ASCII = '0123456789abcdefg';

ALFABET = '123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'; // 62 ronder maximalt

N = 0; // number of players

ZOOM = [
  40,
  40,
  40 // vertical line distance for three states
];

datum = '';

currentTable = 0;

currentResult = 0;

tournament = null;

errors = []; // id för motsägelsefulla resultat. Tas bort med Delete

state = 0; // 0=Tables 1=Standings 2=Names

resultat = []; // 012 sorterad på id

message = ''; //This is a tutorial tournament. Use it or edit the URL'

showType = function(a) {
  if (typeof a === 'string') {
    return `'${a}'`;
  } else {
    return a;
  }
};

//assert = (a,b) -> if not _.isEqual a,b then print "Assert failure: #{showType a} != #{showType b}"
assert = function(a, b) {
  if (!_.isEqual(a, b)) {
    return print(`Assert failure: ${JSON.stringify(a)} != ${JSON.stringify(b)}`);
  }
};

ok = function(p0, p1) {
  var ref;
  return p0.id !== p1.id && (ref = p0.id, indexOf.call(p1.opp, ref) < 0) && abs(p0.balans() + p1.balans()) <= COLORS;
};

other = function(col) {
  if (col === 'b') {
    return 'w';
  } else {
    return 'b';
  }
};

myRound = function(x, decs) {
  return x.toFixed(decs);
};

assert("2.0", myRound(1.99, 1));

assert("0.6", myRound(0.61, 1));

ints2strings = function(ints) {
  return `${ints}`;
};

assert("1,2,3", ints2strings([1, 2, 3]));

assert("1", ints2strings([1]));

assert("", ints2strings([]));

res2string = function(ints) {
  var i;
  return ((function() {
    var k, len, results;
    results = [];
    for (k = 0, len = ints.length; k < len; k++) {
      i = ints[k];
      results.push(i.toString());
    }
    return results;
  })()).join('');
};

assert("123", res2string([1, 2, 3]));

assert("1", res2string([1]));

assert("", res2string([]));

xxx = [[2, 1], [12, 2], [12, 1], [3, 4]];

xxx.sort(function(a, b) {
  var diff;
  diff = a[0] - b[0];
  if (diff === 0) {
    return a[1] - b[1];
  } else {
    return diff;
  }
});

assert([[2, 1], [3, 4], [12, 1], [12, 2]], xxx);

assert(true, [2] > [12]);

assert(true, "2" > "12");

assert(false, 2 > 12);

// xxx = [[2,1],[12,2],[12,1],[3,4]]
// assert [[2,1],[12,1],[12,2],[3,4]], _.sortBy(xxx, (x) -> [x[0],x[1]])
// assert [[3,4],[2,1],[12,1],[12,2]], _.sortBy(xxx, (x) -> -x[0])
// assert [[2,1],[12,1],[3,4],[12,2]], _.sortBy(xxx, (x) -> x[1])
// assert [[3,4],[12,1],[2,1],[12,2]], _.sortBy(xxx, (x) -> -x[1])
XMAX = 2000;

XMIN = 1000;

normera = function(x) {
  return x; // (1000*(XMAX-x) + 2000*(x-XMIN)) / (XMAX - XMIN)
};

Player = class Player {
  constructor(id1, elo1 = "", opp = [], col2 = "", res1 = "", name1 = "") {
    this.id = id1;
    this.elo = elo1;
    this.opp = opp;
    this.col = col2;
    this.res = res1;
    this.name = name1;
    this.active = true;
  }

  toString() {
    return `${this.id} ${this.name} elo:${this.elo} ${this.col} res:${this.res} opp:[${this.opp}] score:${this.score().toFixed(1)} eloSum:${this.eloSum().toFixed(0)}`;
  }

  eloSum() {
    var i, k, len, ref, summa;
    summa = 0;
    ref = range(this.res.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (this.opp[i] !== -1) {
        summa += normera(tournament.persons[this.opp[i]].elo) * tournament.bonus[this.col[i] + this.res[i]];
      }
    }
    return summa;
  }

  avgEloDiff() {
    var id, k, len, ref, res;
    res = [];
    ref = this.opp.slice(0, this.opp.length - 1);
    for (k = 0, len = ref.length; k < len; k++) {
      id = ref[k];
      //res.push abs normera(@elo) - normera(tournament.persons[id].elo)
      if (id !== -1) {
        res.push(abs(this.elo - tournament.persons[id].elo));
      }
    }
    if (res.length === 0) {
      return 0;
    } else {
      return sum(res) / res.length;
    }
  }

  balans() { // färgbalans
    var ch, k, len, ref, result;
    result = 0;
    ref = this.col;
    for (k = 0, len = ref.length; k < len; k++) {
      ch = ref[k];
      if (ch === 'b') {
        result -= 1;
      }
      if (ch === 'w') {
        result += 1;
      }
    }
    return result;
  }

  score() {
    var i, k, key, len, n, ref, res, result, sp;
    result = 0;
    n = tournament.round;
    sp = tournament.sp;
    ref = range(n);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (i < this.col.length && i < this.res.length) {
        key = this.col[i] + this.res[i];
        //result += {'w2': 1-sp, 'b2': 1, 'w1': 0.5-sp, 'b1': 0.5+sp, 'w0': 0, 'b0': sp}[key]
        res = {
          'w2': 1,
          'b2': 1 + 2 * sp,
          'w1': 0.5 - sp,
          'b1': 0.5 + sp,
          'w0': 0,
          'b0': 0
        }[key];
      }
    }
    //print 'id,score',@id, @res, result,n
    return result;
  }

  read(player) {
    var arr, col, k, len, ocr, ocrs;
    
    // (1234|Christer|(12w0|23b½|14w)) 
    // (1234|Christer) 
    // print 'read',player
    this.elo = parseInt(player[0]);
    this.name = player[1];
    this.opp = [];
    this.col = "";
    this.res = "";
    if (player.length < 3) {
      return;
    }
    ocrs = player[2];
    for (k = 0, len = ocrs.length; k < len; k++) {
      ocr = ocrs[k];
      if (indexOf.call(ocr, 'w') >= 0) {
        col = 'w';
      } else {
        col = 'b';
      }
      arr = ocr.split(col);
      this.opp.push(parseInt(arr[0]));
      this.col += col;
      if (arr.length === 2 && arr[1].length === 1) {
        this.res += {
          '0': '0',
          '½': '1',
          '1': '2'
        }[arr[1]];
      }
    }
    return print(this);
  }

  write() { // (1234|Christer|(12w0|23b½|14w)) Elo:1234 Name:Christer opponent:23 color:b result:½
    var i, nn, ocr, res;
    res = [];
    res.push(this.elo);
    res.push(this.name.replaceAll(' ', '_'));
    nn = this.opp.length - 1;
    ocr = (function() {
      var k, len, ref, results;
      ref = range(nn);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(`${this.opp[i]}${this.col[i]}${i < nn ? "0½1"[this.res[i]] : ''}`);
      }
      return results;
    }).call(this);
    res.push('(' + ocr.join('|') + ')');
    return res.join('|');
  }

};

Tournament = class Tournament {
  constructor() {
    this.title = '';
    this.rounds = 0;
    this.round = 0;
    this.sp = 0.0; // 0.01
    this.tpp = 30;
    this.ppp = 60;
    this.expl = 3;
    // dessa tre listor pekar på samma objekt
    this.players = [];
    this.persons = []; // stabil, sorterad på id och elo
    this.pairs = []; // varierar med varje rond
    this.robin = range(N);
    this.fetchURL();
    this.mat = [];
    this.bonus = {
      'w2': 1,
      'b2': 1 + 2 * this.sp,
      'w1': 0.5 - this.sp,
      'b1': 0.5 + this.sp,
      'w0': 0,
      'b0': 0
    };
  }

  write() {}

  makeEdges() {
    var a, b, cost, diff, edges, k, l, len, len1, pa, pb, ref, ref1;
    edges = [];
    ref = range(N);
    for (k = 0, len = ref.length; k < len; k++) {
      a = ref[k];
      pa = this.persons[a];
      if (!pa.active) {
        continue;
      }
      ref1 = range(a + 1, N);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        b = ref1[l];
        pb = this.persons[b];
        if (!pb.active) {
          continue;
        }
        if (DIFF === 'ELO') {
          diff = abs(pa.elo - pb.elo);
        }
        if (DIFF === 'ID') {
          diff = abs(pa.id - pb.id);
        }
        if (COST === 'LINEAR') {
          cost = 2000 - diff;
        }
        if (COST === 'QUADRATIC') {
          cost = 2000 - diff ** 1.01;
        }
        if (ok(pa, pb)) {
          edges.push([pa.id, pb.id, cost]);
        }
      }
    }
    return edges;
  }

  findSolution(edges) {
    var edmonds;
    edmonds = new Edmonds(edges);
    return edmonds.maxWeightMatching(edges);
  }

  flip(p0, p1) { // p0 byter färg, p0 anpassar sig
    var col0, col1;
    col0 = _.last(p0.col);
    col1 = col0;
    col0 = other(col0);
    p0.col += col0;
    return p1.col += col1;
  }

  assignColors(p0, p1) {
    var b0, b1, x;
    b0 = p0.balans();
    b1 = p1.balans();
    if (b0 < b1) {
      x = 0;
    } else if (b0 > b1) {
      x = 1;
    } else if (p0.id < p1.id) {
      x = 0;
    } else {
      x = 1;
    }
    p0.col += 'wb'[x];
    return p1.col += 'bw'[x];
  }

  unscramble(solution) { // [5,3,4,1,2,0] => [[0,5],[1,3],[2,4]]
    var i, j, k, len, ref, result;
    solution = _.clone(solution);
    result = [];
    ref = range(solution.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (solution[i] !== -1) {
        j = solution[i];
        result.push([
          i,
          j //[@players[i].id,@players[j].id]
        ]);
        solution[j] = -1;
        solution[i] = -1;
      }
    }
    return result;
  }

  lotta() {
    var a, b, col0, col1, i, k, l, len, len1, len2, len3, len4, len5, m, missing, net, o, p, pa, pb, q, ref, ref1, ref2, ref3, ref4, ref5, solution, start, t;
    ref = this.persons;
    //print @players
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      if (p.res.length !== p.col.length) {
        print('avbrutet!');
        return;
      }
    }
    print('Lottning av rond ', this.round);
    document.title = 'Round ' + (this.round + 1);
    start = new Date();
    net = this.makeEdges(this.persons);
    print('net', net);
    solution = this.findSolution(net);
    print('solution', solution);
    missing = _.filter(solution, function(x) {
      return x === -1;
    });
    print('missing', missing);
    if (missing.length !== this.paused.length) {
      print('Solution failed!');
      return;
    }
    this.pairs = this.unscramble(solution);
    print('pairs', this.pairs);
    print('cpu:', new Date() - start);
    ref1 = this.persons;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      p = ref1[l];
      if (p.active) {
        continue;
      }
      p.opp.push(-1);
      p.res += '0';
      p.col += ' ';
    }
    ref2 = this.pairs;
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      [a, b] = ref2[m];
      pa = this.persons[a];
      pb = this.persons[b];
      pa.opp.push(pb.id);
      pb.opp.push(pa.id);
    }
    print(this.persons);
    if (this.round === 0) {
      ref3 = range(this.pairs.length);
      for (o = 0, len3 = ref3.length; o < len3; o++) {
        i = ref3[o];
        [a, b] = this.pairs[i];
        pa = this.persons[a];
        pb = this.persons[b];
        col1 = "bw"[i % 2];
        col0 = other(col1);
        pa.col += col0;
        pb.col += col1;
        if (i % 2 === 1) {
          this.pairs[i].reverse();
        }
      }
    } else {
      ref4 = range(this.pairs.length);
      for (q = 0, len4 = ref4.length; q < len4; q++) {
        i = ref4[q];
        [a, b] = this.pairs[i];
        pa = this.persons[a];
        pb = this.persons[b];
        this.assignColors(pa, pb);
        if (pa.col[this.round] === 'b') {
          this.pairs[i].reverse();
        }
      }
    }
    ref5 = this.pairs;
    for (i = t = 0, len5 = ref5.length; t < len5; i = ++t) {
      [a, b] = ref5[i];
      pa = this.persons[a];
      pb = this.persons[b];
      pa.chair = 2 * i;
      pb.chair = 2 * i + 1;
    }
    downloadFile(this.makeURL(), `${this.title} R${this.round} URL.txt`);
    start = new Date();
    if (this.round > 0) {
      downloadFile(this.makeMatrix(), `${this.title} R${this.round} Matrix.txt`);
    }
    downloadFile(tournament.makeStandardFile(), `${this.title} R${this.round}.txt`);
    // downloadFile @makeEdges(), "R#{@round} Net.txt"
    // downloadFile @makeStandings(), "R#{@round} Standings.txt"
    this.round += 1;
    state = 0;
    return xdraw();
  }

  fetchURL(url = location.search) {
    var getParam, i, id, k, l, len, len1, len2, m, p, player, players, ref, ref1, ref2, urlParams;
    if (url === '') {
      window.location.href = "https://github.com/ChristerNilsson/Dense/blob/main/README.md";
    }
    print('fetchURL', url);
    getParam = function(name, def) {
      return urlParams.get(name) || def;
    };
    urlParams = new URLSearchParams(url);
    this.players = [];
    this.title = urlParams.get('TOUR').replaceAll('_', ' ');
    this.datum = urlParams.get('DATE') || "";
    this.rounds = parseInt(urlParams.get('ROUNDS'));
    this.round = parseInt(urlParams.get('ROUND'));
    this.expl = parseInt(getParam('EXPL', 3));
    print('expl', this.expl);
    this.first = getParam('FIRST', 'bw'); // Determines if first player has white or black in the first round
    this.sp = parseFloat(getParam('SP', 0.0)); // ScorePoints
    this.tpp = parseInt(getParam('TPP', 30)); // Tables Per Page
    this.ppp = parseInt(getParam('PPP', 60)); // Players Per Page
    // @downloads = getParam 'DOWNLOADS', 'NST' # Names Standings Tables  (URL is mandatory)
    players = urlParams.get('PLAYERS');
    players = players.replaceAll(')(', ')|(');
    players = players.replaceAll('_', ' ');
    players = '(' + players + ')';
    players = parseExpr(players);
    print('players', players);
    N = players.length;
    if (N < 4) {
      print("Error: Number of players must be 4 or more!");
      return;
    }
    if (N > 999) {
      print("Error: Number of players must be 999 or less!");
      return;
    }
    this.persons = [];
    ref = range(N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      player = new Player(i);
      player.read(players[i]);
      this.persons.push(player);
    }
    this.paused = urlParams.get('PAUSED'); // list of zero based ids
    this.paused = parseExpr(this.paused);
    ref1 = this.paused;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      id = ref1[l];
      this.persons[id].active = false;
    }
    print(this.persons);
    this.persons = _.sortBy(this.persons, function(player) {
      return player.elo;
    });
    this.persons = this.persons.reverse();
    XMAX = this.persons[0].elo;
    XMIN = _.last(this.persons).elo;
    ref2 = range(N);
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      this.persons[i].id = i;
    }
    print((function() {
      var len3, o, ref3, results;
      ref3 = this.persons;
      results = [];
      for (o = 0, len3 = ref3.length; o < len3; o++) {
        p = ref3[o];
        results.push(p.elo);
      }
      return results;
    }).call(this));
    print('sorted players', this.persons); // by id AND descending elo
    if (this.ROUND === 0) {
      if (N % 2 === 1) {
        this.persons.push(new Player(N, 0, '-frirond-'));
        N += 1;
      }
    }
    // persons = _.map range(N), (i) -> {id:i, name: res.NAME[i], elo: res.ELO[i], col:'', res:[], bal:0, opp:[], T:[]}
    this.playersByName = _.sortBy(this.persons, function(player) {
      return player.name;
    });
    return print('playersByName', (function() {
      var len3, o, ref3, results;
      ref3 = this.playersByName;
      results = [];
      for (o = 0, len3 = ref3.length; o < len3; o++) {
        p = ref3[o];
        results.push(p.name);
      }
      return results;
    }).call(this));
  }

  txtT(value, w, align = window.CENTER) {
    var diff, lt, res, rt;
    if (value.length > w) {
      value = value.substring(0, w);
    }
    if (value.length < w && align === window.RIGHT) {
      value = value.padStart(w);
    }
    if (align === window.LEFT) {
      res = value + _.repeat(' ', w - value.length);
    }
    if (align === window.RIGHT) {
      res = _.repeat(' ', w - value.length) + value;
    }
    if (align === window.CENTER) {
      diff = w - value.length;
      lt = _.repeat(' ', Math.floor((1 + diff) / 2));
      rt = _.repeat(' ', Math.floor(diff / 2));
      res = lt + value + rt;
    }
    return res;
  }

  //assert "   Sven   ", txtT "Sven",10
  showHeader(header, round) {
    var s, y;
    y = ZOOM[state] / 2;
    textAlign(LEFT, CENTER);
    s = '';
    s += this.txtT(`${this.title} ${this.datum}`, 30, window.LEFT);
    s += ' ' + this.txtT(header, 15, window.CENTER);
    s += ' ' + this.txtT('Round ' + round, 26, window.RIGHT);
    return text(s, 10, y);
  }

  showFooter(y, footer) {
    var s;
    s = this.txtT(footer, 72);
    return text(s, 10, (3 + y) * 0.5 * ZOOM[state]);
  }

  txt(value, x, y, align = null, color = null) {
    if (align) {
      textAlign(align, CENTER);
    }
    if (color) {
      fill(color);
    }
    return text(value, x, y);
  }

  showNames() {
    var i, k, l, len, len1, p, player, playersByEloSum, r, ref, results, s, y;
    if (this.round === 0) {
      return;
    }
    print('showNames');
    fill('white');
    this.showHeader('Names', this.round);
    this.showFooter(N, "W=larger S=smaller tab=tables enter=standings");
    y = 1.0 * ZOOM[state];
    s = "";
    s += this.txtT('Table', 6, window.LEFT);
    s += this.txtT('Name', 25, window.LEFT);
    s += this.txtT('Pos', 4, window.RIGHT);
    textAlign(window.LEFT);
    text(s, 10, y);
    playersByEloSum = _.clone(this.persons);
    playersByEloSum.sort(function(a, b) {
      return b.eloSum() - a.eloSum();
    });
    for (i = k = 0, len = playersByEloSum.length; k < len; i = ++k) {
      player = playersByEloSum[i];
      p = this.persons[player.id];
      p.position = "";
      if (p.eloSum() > 0) {
        p.position = `${i + 1}`;
      }
    }
    fill('black');
    r = tournament.round - 1;
    ref = this.playersByName;
    results = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      p = ref[l];
      y += ZOOM[state] * 0.5;
      s = "";
      if (p.active) {
        s += this.txtT((1 + Math.floor(p.chair / 2)).toString(), 3, window.RIGHT);
        s += this.txtT(RINGS[p.col[r][0]], 3, window.CENTER);
        s += this.txtT(p.name, 25, window.LEFT);
        s += this.txtT(p.position.toString(), 4, window.RIGHT);
      } else {
        s += ' paus '; //@txtT (1 + p.chair//2).toString(), 3, window.RIGHT
        //s += @txtT RINGS[p.col[r][0]],          3, window.CENTER
        s += this.txtT(p.name, 25, window.LEFT);
      }
      // s += @txtT p.position.toString(),       4, window.RIGHT
      results.push(text(s, 10, y));
    }
    return results;
  }

  showTables() {
    var a, b, both, i, k, len, nr, pa, pb, ref, results, s, y;
    fill('white');
    this.showHeader('Tables', this.round);
    this.showFooter(Math.floor(N / 2), "1 space=½ 0 delete Pair W=large S=small tab=standings enter=names");
    y = 1.0 * ZOOM[state];
    s = "";
    s += this.txtT('Tbl', 3, window.RIGHT);
    s += ' ' + this.txtT('Elo', 4, window.RIGHT);
    s += ' ' + this.txtT('White', 25, window.LEFT);
    s += ' ' + this.txtT('Result', 7, window.CENTER);
    s += ' ' + this.txtT('Black', 25, window.LEFT);
    s += ' ' + this.txtT('Elo', 4, window.RIGHT);
    textAlign(window.LEFT);
    text(s, 10, y);
    ref = range(this.pairs.length);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      [a, b] = this.pairs[i];
      a = this.persons[a];
      b = this.persons[b];
      y += ZOOM[state] * 0.5;
      pa = myRound(a.score(), 1);
      pb = myRound(b.score(), 1);
      both = a.res.length === a.col.length ? prBoth(_.last(a.res)) : "   -   ";
      nr = i + 1;
      s = "";
      s += this.txtT(nr.toString(), 3, window.RIGHT);
      s += ' ' + this.txtT(a.elo.toString(), 4, window.RIGHT);
      s += ' ' + this.txtT(a.name, 25, window.LEFT);
      s += ' ' + this.txtT(both, 7, window.CENTER);
      s += ' ' + this.txtT(b.name, 25, window.LEFT);
      s += ' ' + this.txtT(b.elo.toString(), 4, window.RIGHT);
      if (i === currentTable) {
        fill('yellow');
        noStroke();
        rect(0, y - 0.25 * ZOOM[state], width, 0.5 * ZOOM[state]);
        fill('black');
      } else {
        if (indexOf.call(errors, i) >= 0) {
          fill('red');
        } else {
          fill('black');
        }
      }
      results.push(text(s, 10, y));
    }
    return results;
  }

  lightbulb(color, x, y, result, opponent) {
    var strokeWeight;
    if (result === "") {
      return;
    }
    push();
    result = '012'.indexOf(result);
    fill('red gray green'.split(' ')[result]);
    rectMode(CENTER);
    rect(x, y, 0.84 * ZOOM[state], 0.45 * ZOOM[state]);
    fill({
      b: 'black',
      ' ': 'yellow',
      w: 'white'
    }[color]);
    noStroke();
    strokeWeight = 0;
    this.txt(opponent, x, y + 1, CENTER);
    return pop();
  }

  makeURL() {
    var k, len, p, players, ref, res, s;
    res = [];
    //res.push "https://christernilsson.github.io/Dense"
    res.push("http://127.0.0.1:5500");
    res.push("?TOUR=" + this.title.replaceAll(' ', '_'));
    res.push("&DATE=" + "2023-11-25");
    res.push("&ROUNDS=" + this.rounds);
    res.push("&ROUND=" + this.round);
    res.push("&PLAYERS=");
    players = [];
    ref = this.persons;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      s = p.write();
      players.push('(' + s + ')');
    }
    players = players.join("\n");
    res = res.concat(players);
    return res.join('\n');
  }

  makeStandings(header, res) {
    var elo, i, inv, k, key, l, len, len1, len2, len3, m, o, p, person, r, ref, ref1, ref2, s, temp, terms;
    if (this.pairs.length === 0) {
      res.push("This ROUND can't be paired! (Too many rounds)");
    }
    temp = _.clone(this.persons);
    temp.sort(function(a, b) {
      var diff;
      diff = b.eloSum() - a.eloSum();
      if (diff !== 0) {
        return diff;
      }
      return b.elo - a.elo;
    });
    inv = invert((function() {
      var k, len, results;
      results = [];
      for (k = 0, len = temp.length; k < len; k++) {
        p = temp[k];
        results.push(p.id);
      }
      return results;
    })());
    res.push("STANDINGS" + header);
    res.push("");
    header = "";
    header += this.txtT("#", 2);
    // header += ' ' + @txtT "Id",    4,window.RIGHT
    header += ' ' + this.txtT("Elo", 4, window.RIGHT);
    header += ' ' + this.txtT("Name", 25, window.LEFT);
    ref = range(this.round);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      header += this.txtT(`${r + 1}`, 6, window.RIGHT);
    }
    header += '  ' + this.txtT("EloSum", 8, window.RIGHT);
    if (this.round <= this.expl) {
      header += '  ' + this.txtT("Explanation", 12, window.LEFT);
    }
    for (i = l = 0, len1 = temp.length; l < len1; i = ++l) {
      person = temp[i];
      if (i % this.ppp === 0) {
        res.push(header);
      }
      s = "";
      s += this.txtT((1 + i).toString(), 2, window.RIGHT);
      s += ' ' + this.txtT(person.elo.toString(), 4, window.RIGHT);
      s += ' ' + this.txtT(person.name, 25, window.LEFT);
      s += ' ';
      ref1 = range(this.round);
      for (m = 0, len2 = ref1.length; m < len2; m++) {
        r = ref1[m];
        if (person.opp[r] === -1) {
          s += '      ';
        } else {
          s += this.txtT(`${1 + inv[person.opp[r]]}${RINGS[person.col[r][0]]}${"0½1"[person.res[r]]}`, 6, window.RIGHT);
        }
      }
      s += ' ' + this.txtT(person.eloSum().toFixed(1), 8, window.RIGHT);
      terms = [];
      print('expl', this.round, this.expl, this.round < this.expl);
      if (this.round <= this.expl) {
        ref2 = range(this.round);
        for (o = 0, len3 = ref2.length; o < len3; o++) {
          r = ref2[o];
          if (person.opp[r] === -1) {
            terms.push("0 * 0");
          } else {
            key = person.col[r][0] + person.res[r];
            elo = this.persons[person.opp[r]].elo;
            terms.push(`${this.bonus[key]} * ${elo}`);
          }
        }
        s += '  (' + terms.join(' + ') + ')';
      }
      res.push(s);
      if (i % this.ppp === this.ppp - 1) {
        res.push("\f");
      }
    }
    return res.push("\f");
  }

  makeNames(header, players, res) { // players sorterad på namn
    var i, k, l, len, len1, p, r, temp;
    temp = _.clone(players);
    temp.sort(function(a, b) {
      return b[0].eloSum() - a[0].eloSum();
    });
    for (i = k = 0, len = temp.length; k < len; i = ++k) {
      p = temp[i];
      p[0].position = "";
      if (p[0].eloSum() > 0) {
        p[0].position = `#${i + 1}`;
      }
    }
    res.push("NAMES" + header);
    res.push("");
    r = tournament.round;
    for (i = l = 0, len1 = players.length; l < len1; i = ++l) {
      p = players[i];
      if (i % this.ppp === 0) {
        res.push("Table Name");
      }
      res.push(`${str(1 + Math.floor(p[1] / 2)).padStart(3)} ${RINGS[p[0].col[r][0]]} ${p[0].name} ${p[0].position}`);
      if (i % this.ppp === this.ppp - 1) {
        res.push("\f");
      }
    }
    return res.push("\f");
  }

  makeTables(header, res) {
    var a, b, i, k, len, pa, pb, ref, results;
    res.push("TABLES" + header);
    res.push("");
    ref = range(this.pairs.length);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      [a, b] = this.pairs[i];
      if (i % this.tpp === 0) {
        res.push(`Table      ${RINGS.w}`.padEnd(25) + _.pad("", 28 + 10) + `${RINGS.b}`);
      }
      pa = this.persons[a];
      pb = this.persons[b];
      res.push("");
      res.push(_.pad(i + 1, 6) + pa.elo + ' ' + this.txtT(pa.name, 25, window.LEFT) + ' ' + _.pad("|____| - |____|", 20) + ' ' + pb.elo + ' ' + this.txtT(pb.name, 25, window.LEFT));
      if (i % this.tpp === this.tpp - 1) {
        results.push(res.push("\f"));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  makeStandardFile() {
    var a, b, header0, header1, i, k, len, pa, pb, players, ref, res, timestamp;
    res = [];
    players = [];
    ref = range(this.pairs.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      [a, b] = this.pairs[i];
      pa = this.persons[a];
      pb = this.persons[b];
      players.push([pa, 2 * i]);
      players.push([pb, 2 * i + 1]);
    }
    players = _.sortBy(players, function(p) {
      return p[0].name;
    });
    timestamp = new Date().toLocaleString('se-SE').slice(0, 16);
    header0 = " for " + this.title + ` after Round ${this.round}    ${timestamp}`;
    header1 = " for " + this.title + ` in Round ${this.round + 1}    ${timestamp}`;
    if (this.round > 0) {
      this.makeStandings(header0, res);
    }
    if (this.round < this.rounds) {
      this.makeNames(header1, players, res);
      this.makeTables(header1, res);
    }
    return res.join("\n");
  }

  distans(rounds) {
    var a, b, i, k, l, len, len1, pa, pb, ref, ref1, result;
    result = [];
    ref = range(rounds.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = rounds[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        [a, b] = ref1[l];
        pa = tournament.persons[a];
        pb = tournament.persons[b];
        if (pa.active && pb.active) {
          result.push(abs(pa.elo - pb.elo));
        }
      }
    }
    return (sum(result) / result.length).toFixed(2);
  }

  makeCanvas() {
    var i, k, len, line, ref, result;
    result = [];
    ref = range(N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      line = new Array(N);
      _.fill(line, '·');
      line[i] = '*';
      result.push(line);
    }
    return result;
  }

  dumpCanvas(title, average, canvas) {
    var header, i, item, k, len, nr, ordning, output, p, ref, row;
    output = ["", title];
    output.push(`Sparseness: ${average}  (Average Elo Difference) DIFF:${DIFF} COST:${COST} COLORS:${COLORS} SP:${this.sp}`);
    output.push("");
    header = ((function() {
      var k, len, ref, results;
      ref = range(N);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(str((i + 1) % 10));
      }
      return results;
    })()).join(' ');
    output.push('     ' + header + '   Elo    AED');
    ordning = (function() {
      var k, len, ref, results;
      ref = this.persons;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        p = ref[k];
        results.push(p.elo);
      }
      return results;
    }).call(this);
    ref = range(canvas.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      row = canvas[i];
      nr = str(i + 1).padStart(3);
      output.push(`${nr}  ${((function() {
        var l, len1, results;
        results = [];
        for (l = 0, len1 = row.length; l < len1; l++) {
          item = row[l];
          results.push(str(item));
        }
        return results;
      })()).join(" ")}  ${ordning[i]} ${this.persons[i].avgEloDiff().toFixed(1).padStart(6)}`);
    }
    output.push('     ' + header);
    return output.join('\n');
  }

  drawMatrix(title, rounds) {
    var a, b, canvas, i, k, l, len, len1, ref, ref1;
    canvas = this.makeCanvas();
    ref = range(rounds.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = rounds[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        [a, b] = ref1[l];
        if (this.persons[a].active && this.persons[b].active) {
          canvas[a][b] = ALFABET[i];
          canvas[b][a] = ALFABET[i];
        }
      }
    }
    return this.dumpCanvas(title, this.distans(rounds), canvas);
  }

  makeMatrix() {
    var k, l, len, len1, matrix, p, r, ref, ref1, res;
    matrix = [];
    ref = range(this.round);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      res = [];
      ref1 = this.persons;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        p = ref1[l];
        res.push([p.id, p.opp[r]]);
      }
      matrix.push(res);
    }
    return this.drawMatrix(this.title, matrix);
  }

  showStandings() {
    var i, inv, k, len, p, person, playersByEloSum, r, results, rheader, s, x, y;
    noStroke();
    fill('white');
    this.showHeader('Standings', this.round - 1);
    this.showFooter(N, "W=larger S=smaller tab=names enter=tables");
    if (this.pairs.length === 0) {
      txt("This ROUND can't be paired! (Too many rounds)", width / 2, height / 2, CENTER);
      return;
    }
    playersByEloSum = _.clone(this.persons);
    playersByEloSum.sort(function(a, b) {
      var diff;
      diff = b.eloSum() - a.eloSum();
      if (diff !== 0) {
        return diff;
      }
      return b.elo - a.elo;
    });
    inv = invert((function() {
      var k, len, results;
      results = [];
      for (k = 0, len = playersByEloSum.length; k < len; k++) {
        p = playersByEloSum[k];
        results.push(p.id);
      }
      return results;
    })());
    y = 1.0 * ZOOM[state] + currentResult;
    textAlign(LEFT);
    rheader = _.map(range(1, this.rounds + 1), function(i) {
      return `${i % 10} `;
    });
    rheader = rheader.join(' ');
    s = "";
    s += this.txtT("Pos", 3, window.RIGHT);
    s += ' ' + this.txtT("Elo", 4, window.RIGHT);
    s += ' ' + this.txtT("Name", 25, window.LEFT);
    s += ' ' + this.txtT(rheader, 3 * this.rounds, window.LEFT);
    s += ' ' + this.txtT("EloSum", 7, window.RIGHT);
    text(s, 10, y);
    fill('black');
    results = [];
    for (i = k = 0, len = playersByEloSum.length; k < len; i = ++k) {
      person = playersByEloSum[i];
      y += ZOOM[state] * 0.5;
      s = "";
      s += this.txtT((1 + i).toString(), 3, window.RIGHT);
      s += ' ' + this.txtT(person.elo.toString(), 4, window.RIGHT);
      s += ' ' + this.txtT(person.name, 25, window.LEFT);
      s += ' ' + this.txtT('', 3 * this.rounds, window.CENTER);
      s += ' ' + this.txtT(person.eloSum().toFixed(1), 7, window.RIGHT);
      text(s, 10, y);
      results.push((function() {
        var l, len1, ref, results1;
        ref = range(this.round - 1);
        results1 = [];
        for (l = 0, len1 = ref.length; l < len1; l++) {
          r = ref[l];
          x = ZOOM[state] * (10.85 + 0.9 * r);
          print('xxx', person.opp[r]);
          if (person.opp[r] === -1) {
            results1.push(this.lightbulb(person.col[r][0], x, y, "", ""));
          } else {
            results1.push(this.lightbulb(person.col[r][0], x, y, person.res[r], 1 + inv[person.opp[r]]));
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  }

};

copyToClipboard = function(text) {
  var textarea;
  if (!navigator.clipboard) {
    textarea = document.createElement('textarea');
    textarea.value = text;
    document.boF.appendChild(textarea);
    textarea.select();
    document.execCommand('copy');
    document.boF.removeChild(textarea);
    return message = 'Urlen har kopierats till klippbordet 1';
  } else {
    return navigator.clipboard.writeText(text).then(() => {
      return message = 'Urlen har kopierats till klippbordet 2';
    }).catch((err) => {
      return message('Kopiering till klippbordet misslyckades');
    });
  }
};

sum = function(s) {
  var item, k, len, res;
  res = 0;
  for (k = 0, len = s.length; k < len; k++) {
    item = s[k];
    res += parseFloat(item);
  }
  return res;
};

assert(6, sum('012012'));

downloadFile = function(txt, filename) {
  var a, blob, url;
  blob = new Blob([txt], {
    type: 'text/plain'
  });
  url = URL.createObjectURL(blob);
  a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  return URL.revokeObjectURL(url);
};

prBoth = function(score) {
  var a, ax, b, bx;
  a = ASCII.indexOf(score);
  b = 2 - a;
  ax = prRes(score);
  bx = prRes(ASCII[b]);
  if (ax.length === 1) {
    ax = ' ' + ax;
  }
  if (bx.length === 1) {
    bx = bx + ' ';
  }
  return ax + ' - ' + bx;
};

prRes = function(score) {
  var a, b;
  score = ASCII.indexOf(score);
  a = `${Math.floor(score / 2)}`;
  if (a === "0") {
    a = "";
  }
  b = score % 2 === 1 ? '½' : '';
  if (a + b === "") {
    return '0';
  }
  return a + b;
};

assert('0', prRes('0'));

assert('½', prRes('1'));

assert('1', prRes('2'));

assert('1½', prRes('3'));

assert('4', prRes('8'));

assert('5', prRes('a'));

assert('5½', prRes('b'));

invert = function(arr) {
  var i, k, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    res[arr[i]] = i;
  }
  return res;
};

assert([0, 1, 2, 3], invert([0, 1, 2, 3]));

assert([3, 2, 0, 1], invert([2, 3, 1, 0]));

assert([2, 3, 1, 0], invert(invert([2, 3, 1, 0])));

window.windowResized = function() {
  if (state === 0) {
    resizeCanvas(windowWidth - 4, (3.5 + Math.floor(N / 2)) * 0.5 * ZOOM[state]);
  }
  if (state === 1 || state === 2) {
    resizeCanvas(windowWidth - 4, (3.5 + N) * 0.5 * ZOOM[state]);
  }
  return xdraw();
};

window.setup = function() {
  textFont('Courier New');
  textAlign(CENTER, CENTER);
  tournament = new Tournament();
  tournament.lotta();
  state = 0;
  return window.windowResized();
};

xdraw = function() {
  background('gray');
  textSize(ZOOM[state] * 0.5);
  if (state === 0) {
    tournament.showTables();
  }
  if (state === 1) {
    tournament.showStandings();
  }
  if (state === 2) {
    return tournament.showNames();
  }
};

elo_probabilities = function(R_W, R_B, draw = 0.2) {
  var E_W, index, loss, win, x;
  E_W = 1 / (1 + 10 ** ((R_B - R_W) / 400));
  win = E_W - draw / 2;
  loss = (1 - E_W) - draw / 2;
  x = _.random(0, 1, true);
  index = 2;
  if (x < loss + draw) {
    index = 1;
  }
  if (x < loss) {
    index = 0;
  }
  return index;
};

handleResult = function(a, b, pa, pb, key) {
  var ch, index;
  index = '0 1'.indexOf(key);
  ch = "012"[index];
  if (pa.res.length === pa.col.length) {
    if (ch !== _.last(pa.res)) {
      errors.push(currentTable);
      print('errors', errors);
    }
  } else {
    if (pa.res.length < pa.col.length) {
      pa.res += "012"[index];
    }
    if (pb.res.length < pb.col.length) {
      pb.res += "210"[index];
    }
  }
  return currentTable = modulo(currentTable + 1, Math.floor(N / 2));
};

fakeInput = function() {
  var a, b, i, k, len, pa, pb, r, ref, res, results, x;
  ref = range(tournament.pairs.length);
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    [a, b] = tournament.pairs[i];
    pa = tournament.persons[a];
    pb = tournament.persons[b];
    x = 1;
    if (x === 0) { // Utan slump
      if (abs(pa.elo - pb.elo) <= 5) {
        res = 1;
      } else if (pa.elo > pb.elo) {
        res = 2;
      } else {
        res = 0;
      }
    } else if (x === 1) { // elo_prob
      res = elo_probabilities(pa.elo, pb.elo);
    } else if (x === 2) { // ren slump [0.4,0.2,0.4]
      r = _.random(1, true);
      res = 2;
      if (r < 0.6) {
        res = 1;
      }
      if (r < 0.4) {
        res = 0;
      }
    }
    if (pa.res.length < pa.col.length) {
      pa.res += "012"[res];
    }
    if (pb.res.length < pb.col.length) {
      results.push(pb.res += "012"[2 - res]);
    } else {
      results.push(void 0);
    }
  }
  return results;
};

handleDelete = function(pa, pb) {
  var a, b, e, i;
  i = currentTable;
  errors = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = errors.length; k < len; k++) {
      e = errors[k];
      if (e !== i) {
        results.push(e);
      }
    }
    return results;
  })();
  if (pa.res.length === pb.res.length) {
    [a, b] = tournament.pairs[i];
    pa = tournament.persons[a];
    pb = tournament.persons[b];
    // b = tournament.pairings[2*i+1]
    pa.res = pa.res.substring(0, pa.res.length - 1);
    pb.res = pb.res.substring(0, pb.res.length - 1);
  }
  return currentTable = modulo(currentTable + 1, Math.floor(N / 2));
};

window.mousePressed = function(event) {
  if (state === 0) {
    currentTable = int(mouseY / (0.5 * ZOOM[state]) - 2.5);
    return xdraw();
  }
};

fixCanvas = function(delta) {
  state = modulo(state + delta, 3);
  if (state === 0) {
    resizeCanvas(windowWidth - 4, (3.5 + Math.floor(N / 2)) * 0.5 * ZOOM[state]);
  }
  if (state === 1) {
    resizeCanvas(windowWidth - 4, (3.5 + N) * 0.5 * ZOOM[state]);
  }
  if (state === 2) {
    return resizeCanvas(windowWidth - 4, (3.5 + N) * 0.5 * ZOOM[state]);
  }
};

window.keyPressed = function(event) {
  var a, b, pa, pb;
  // print key
  if (key === 'Home') {
    currentTable = 0;
  }
  if (key === 'End') {
    currentTable = (Math.floor(N / 2)) - 1;
  }
  if (key === 'ArrowUp') {
    currentTable = modulo(currentTable - 1, Math.floor(N / 2));
    event.preventDefault();
  }
  if (key === 'ArrowDown') {
    currentTable = modulo(currentTable + 1, Math.floor(N / 2));
    event.preventDefault();
  }
  [a, b] = tournament.pairs[currentTable];
  pa = tournament.persons[a];
  pb = tournament.persons[b];
  if (indexOf.call('0 1', key) >= 0) {
    handleResult(a, b, pa, pb, key);
  }
  if (key === 'Tab') {
    fixCanvas(1);
    event.preventDefault();
  }
  if (key === 'Enter') {
    fixCanvas(-1);
  }
  if (indexOf.call('pP', key) >= 0) {
    tournament.lotta();
  }
  if (indexOf.call('w', key) >= 0) {
    ZOOM[state] += 1;
  }
  if (indexOf.call('s', key) >= 0) {
    ZOOM[state] -= 1;
  }
  if (indexOf.call('W', key) >= 0) {
    ZOOM[state] += 4;
  }
  if (indexOf.call('S', key) >= 0) {
    ZOOM[state] -= 4;
  }
  if (indexOf.call('wWsS', key) >= 0) {
    if (state === 0) {
      resizeCanvas(windowWidth - 4, (3.5 + Math.floor(N / 2)) * 0.5 * ZOOM[state]);
    }
    if (state === 1) {
      resizeCanvas(windowWidth - 4, (3.5 + N) * 0.5 * ZOOM[state]);
    }
  }
  if (key === 'x') {
    fakeInput();
  }
  if (key === 'Delete') {
    handleDelete(pa, pb);
  }
  return xdraw();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\Dense\coffee\dense.coffee