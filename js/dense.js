// Generated by CoffeeScript 2.7.0
var ALFABET, ASCII, COLORS, COST, DIFF, N, Names, Page, Pairings, Player, RINGS, Standings, Tables, Tournament, ZOOM, assert, datum, downloadFile, errors, ints2strings, invert, message, myRound, normera, ok, other, pages, prBoth, print, range, res2string, resultat, setState, showType, state, sum, tournament, xxx, zoomIn, zoomOut,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  parseExpr
} from './parser.js';

import {
  Edmonds
} from './mattkrick.js';

import {
  Button,
  spread
} from './button.js';


// parameters that somewhat affects matching
COST = 'QUADRATIC'; // QUADRATIC=1.01 or LINEAR=1

DIFF = 'ID'; // ID or ELO

COLORS = 1; // 1 or 2

RINGS = {
  'b': '•',
  ' ': ' ',
  'w': 'o'
};

print = console.log;

range = _.range;

ASCII = '0123456789abcdefg';

ALFABET = '123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'; // 62 ronder maximalt

N = 0; // number of players

ZOOM = [
  20,
  20,
  20,
  20 // vertical line distance for four states
];

datum = '';

tournament = null;

errors = []; // id för motsägelsefulla resultat. Tas bort med Delete

pages = [];

state = 0; // 0=Tables 1=Names 2=Standings 3=Pairings

resultat = []; // 012 sorterad på id

message = ''; //This is a tutorial tournament. Use it or edit the URL'

showType = function(a) {
  if (typeof a === 'string') {
    return `'${a}'`;
  } else {
    return a;
  }
};

//assert = (a,b) -> if not _.isEqual a,b then print "Assert failure: #{showType a} != #{showType b}"
assert = function(a, b) {
  if (!_.isEqual(a, b)) {
    return print(`Assert failure: ${JSON.stringify(a)} != ${JSON.stringify(b)}`);
  }
};

ok = function(p0, p1) {
  var ref;
  return p0.id !== p1.id && (ref = p0.id, indexOf.call(p1.opp, ref) < 0) && abs(p0.balans() + p1.balans()) <= COLORS;
};

other = function(col) {
  if (col === 'b') {
    return 'w';
  } else {
    return 'b';
  }
};

myRound = function(x, decs) {
  return x.toFixed(decs);
};

assert("2.0", myRound(1.99, 1));

assert("0.6", myRound(0.61, 1));

ints2strings = function(ints) {
  return `${ints}`;
};

assert("1,2,3", ints2strings([1, 2, 3]));

assert("1", ints2strings([1]));

assert("", ints2strings([]));

res2string = function(ints) {
  var i;
  return ((function() {
    var l, len, results;
    results = [];
    for (l = 0, len = ints.length; l < len; l++) {
      i = ints[l];
      results.push(i.toString());
    }
    return results;
  })()).join('');
};

assert("123", res2string([1, 2, 3]));

assert("1", res2string([1]));

assert("", res2string([]));

xxx = [[2, 1], [12, 2], [12, 1], [3, 4]];

xxx.sort(function(a, b) {
  var diff;
  diff = a[0] - b[0];
  if (diff === 0) {
    return a[1] - b[1];
  } else {
    return diff;
  }
});

assert([[2, 1], [3, 4], [12, 1], [12, 2]], xxx);

assert(true, [2] > [12]);

assert(true, "2" > "12");

assert(false, 2 > 12);

// xxx = [[2,1],[12,2],[12,1],[3,4]]
// assert [[2,1],[12,1],[12,2],[3,4]], _.sortBy(xxx, (x) -> [x[0],x[1]])
// assert [[3,4],[2,1],[12,1],[12,2]], _.sortBy(xxx, (x) -> -x[0])
// assert [[2,1],[12,1],[3,4],[12,2]], _.sortBy(xxx, (x) -> x[1])
// assert [[3,4],[12,1],[2,1],[12,2]], _.sortBy(xxx, (x) -> -x[1])
normera = function(a, b, k) {
  return Math.round((b - k * a) / (k - 1)); // Räknar ut vad som ska adderas till elotalen
};

assert(-406, normera(1406, 2406, 2)); // 1000,2000

assert(-1900, normera(1950, 2000, 2)); //   50,100

assert(0, normera(1000, 2000, 2)); // 1000,2000

assert(200, normera(900, 2000, 2)); // 1100,2200

assert(-1200, normera(1600, 2000, 2)); //  400,800

assert(-500, normera(1000, 2000, 3)); //  500,1500

assert(-1000, normera(1200, 1800, 4)); //  200,800

assert(-1067, normera(1400, 2400, 4)); //  333,1333

assert(-800, normera(1600, 2000, 1.5)); //  800,1200

assert(400, normera(1600, 2000, 1.2)); // 2000,2400

assert(2400, normera(1600, 2000, 1.1)); // 4000,4400

Player = class Player {
  constructor(id1, name1 = "", elo1 = "1400", opp = [], col2 = "", res1 = "") {
    this.id = id1;
    this.name = name1;
    this.elo = elo1;
    this.opp = opp;
    this.col = col2;
    this.res = res1;
    this.active = true;
  }

  toString() {
    return `${this.id} ${this.name} elo:${this.elo} ${this.col} res:${this.res} opp:[${this.opp}] score:${this.score().toFixed(1)} eloSum:${this.eloSum().toFixed(0)}`;
  }

  toggle() {
    var p;
    this.active = !this.active;
    print('toggle1', tournament.persons);
    tournament.paused = (function() {
      var l, len, ref, results;
      ref = tournament.persons;
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        p = ref[l];
        if (!p.active) {
          results.push(p.id);
        }
      }
      return results;
    })();
    return print('toggle2', tournament.paused);
  }

  eloSum() {
    var i, l, len, ref, summa;
    summa = 0;
    ref = range(this.res.length);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      if (this.opp[i] !== -1) {
        summa += normera(tournament.persons[this.opp[i]].elo) * tournament.bonus[this.col[i] + this.res[i]];
      }
    }
    return summa;
  }

  avgEloDiff() {
    var id, l, len, ref, res;
    res = [];
    ref = this.opp.slice(0, this.opp.length - 1);
    for (l = 0, len = ref.length; l < len; l++) {
      id = ref[l];
      //res.push abs normera(@elo) - normera(tournament.persons[id].elo)
      if (id !== -1) {
        res.push(abs(this.elo - tournament.persons[id].elo));
      }
    }
    if (res.length === 0) {
      return 0;
    } else {
      return sum(res) / res.length;
    }
  }

  balans() { // färgbalans
    var ch, l, len, ref, result;
    result = 0;
    ref = this.col;
    for (l = 0, len = ref.length; l < len; l++) {
      ch = ref[l];
      if (ch === 'b') {
        result -= 1;
      }
      if (ch === 'w') {
        result += 1;
      }
    }
    return result;
  }

  score() {
    var i, key, l, len, n, ref, res, result, sp;
    result = 0;
    n = tournament.round;
    sp = tournament.sp;
    ref = range(n);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      if (i < this.col.length && i < this.res.length) {
        key = this.col[i] + this.res[i];
        //result += {'w2': 1-sp, 'b2': 1, 'w1': 0.5-sp, 'b1': 0.5+sp, 'w0': 0, 'b0': sp}[key]
        res = {
          'w2': 1,
          'b2': 1 + 2 * sp,
          'w1': 0.5 - sp,
          'b1': 0.5 + sp,
          'w0': 0,
          'b0': 0
        }[key];
      }
    }
    //print 'id,score',@id, @res, result,n
    return result;
  }

  read(player) {
    var arr, col, l, len, ocr, ocrs;
    
    // (1234|Christer|(12w0|23b½|14w)) 
    // (1234|Christer) 
    // print 'read',player
    this.elo = parseInt(player[0]);
    this.name = player[1];
    this.opp = [];
    this.col = "";
    this.res = "";
    if (player.length < 3) {
      return;
    }
    ocrs = player[2];
    for (l = 0, len = ocrs.length; l < len; l++) {
      ocr = ocrs[l];
      if (indexOf.call(ocr, 'w') >= 0) {
        col = 'w';
      } else {
        col = 'b';
      }
      arr = ocr.split(col);
      this.opp.push(parseInt(arr[0]));
      this.col += col;
      if (arr.length === 2 && arr[1].length === 1) {
        this.res += {
          '0': '0',
          '½': '1',
          '1': '2'
        }[arr[1]];
      }
    }
    return print(this);
  }

  write() { // (1234|Christer|(12w0|23b½|14w)) Elo:1234 Name:Christer opponent:23 color:b result:½
    var i, nn, ocr, res;
    res = [];
    res.push(this.elo);
    res.push(this.name.replaceAll(' ', '_'));
    nn = this.opp.length - 1;
    ocr = (function() {
      var l, len, ref, results;
      ref = range(nn);
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        i = ref[l];
        results.push(`${this.opp[i]}${this.col[i]}${i < nn ? "0½1"[this.res[i]] : ''}`);
      }
      return results;
    }).call(this);
    res.push('(' + ocr.join('|') + ')');
    return res.join('|');
  }

};

Tournament = class Tournament {
  constructor() {
    this.title = '';
    this.rounds = 0;
    this.round = 0;
    this.sp = 0.0; // 0.01
    this.tpp = 30;
    this.ppp = 60;
    this.expl = 3;
    // dessa tre listor pekar på samma objekt
    this.players = [];
    this.persons = []; // stabil, sorterad på id och elo
    this.pairs = []; // varierar med varje rond
    this.robin = range(N);
    this.fetchURL();
    this.mat = [];
    this.bonus = {
      'w2': 1,
      'b2': 1 + 2 * this.sp,
      'w1': 0.5 - this.sp,
      'b1': 0.5 + this.sp,
      'w0': 0,
      'b0': 0
    };
  }

  write() {}

  makeEdges() {
    var a, b, cost, diff, edges, l, len, len1, m, pa, pb, ref, ref1;
    edges = [];
    ref = range(N + 1);
    // tag med frironden
    for (l = 0, len = ref.length; l < len; l++) {
      a = ref[l];
      pa = this.persons[a];
      if (!pa.active) {
        continue;
      }
      ref1 = range(a + 1, N + 1);
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        b = ref1[m];
        pb = this.persons[b];
        if (!pb.active) {
          continue;
        }
        if (DIFF === 'ELO') {
          diff = abs(pa.elo - pb.elo);
        }
        if (DIFF === 'ID') {
          diff = abs(pa.id - pb.id);
        }
        if (COST === 'LINEAR') {
          cost = 2000 - diff;
        }
        if (COST === 'QUADRATIC') {
          cost = 2000 - diff ** 1.01;
        }
        if (ok(pa, pb)) {
          edges.push([pa.id, pb.id, cost]);
        }
      }
    }
    return edges;
  }

  findSolution(edges) {
    var edmonds;
    edmonds = new Edmonds(edges);
    return edmonds.maxWeightMatching(edges);
  }

  flip(p0, p1) { // p0 byter färg, p0 anpassar sig
    var col0, col1;
    col0 = _.last(p0.col);
    col1 = col0;
    col0 = other(col0);
    p0.col += col0;
    return p1.col += col1;
  }

  assignColors(p0, p1) {
    var b0, b1, x;
    b0 = p0.balans();
    b1 = p1.balans();
    if (b0 < b1) {
      x = 0;
    } else if (b0 > b1) {
      x = 1;
    } else if (p0.id < p1.id) {
      x = 0;
    } else {
      x = 1;
    }
    p0.col += 'wb'[x];
    return p1.col += 'bw'[x];
  }

  unscramble(solution) { // [5,3,4,1,2,0] => [[0,5],[1,3],[2,4]]
    var i, j, l, len, ref, result;
    solution = _.clone(solution);
    result = [];
    ref = range(solution.length);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      if (solution[i] !== -1) {
        j = solution[i];
        result.push([
          i,
          j //[@players[i].id,@players[j].id]
        ]);
        solution[j] = -1;
        solution[i] = -1;
      }
    }
    return result;
  }

  preMatch() {
    var active, l, len, p, ref;
    ref = this.persons;
    for (l = 0, len = ref.length; l < len; l++) {
      p = ref[l];
      // if not p.active
      if (p.res.length < p.col.length) {
        p.res += '0';
      }
    }
    active = _.filter(this.persons.slice(0, this.persons.length - 1), function(p) {
      return p.active;
    });
    print('preMatch', active);
    return this.persons[N].active = active.length % 2 === 1;
  }

  postMatch() {
    var a, b, col0, col1, i, l, len, len1, len2, len3, len4, m, o, p, pa, pb, q, ref, ref1, ref2, ref3, ref4, results, u;
    ref = this.persons;
    for (l = 0, len = ref.length; l < len; l++) {
      p = ref[l];
      if (p.active) {
        continue;
      }
      p.opp.push(-1);
      // p.res += '0'
      p.col += ' ';
    }
    ref1 = this.pairs;
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      [a, b] = ref1[m];
      pa = this.persons[a];
      pb = this.persons[b];
      pa.opp.push(pb.id);
      pb.opp.push(pa.id);
    }
    print(this.persons);
    if (this.round === 0) {
      ref2 = range(this.pairs.length);
      for (o = 0, len2 = ref2.length; o < len2; o++) {
        i = ref2[o];
        [a, b] = this.pairs[i];
        pa = this.persons[a];
        pb = this.persons[b];
        col1 = "bw"[i % 2];
        col0 = other(col1);
        pa.col += col0;
        pb.col += col1;
        if (i % 2 === 1) {
          this.pairs[i].reverse();
        }
      }
    } else {
      ref3 = range(this.pairs.length);
      for (q = 0, len3 = ref3.length; q < len3; q++) {
        i = ref3[q];
        [a, b] = this.pairs[i];
        pa = this.persons[a];
        pb = this.persons[b];
        this.assignColors(pa, pb);
        if (pa.col[this.round] === 'b') {
          this.pairs[i].reverse();
        }
      }
    }
    ref4 = this.pairs;
    results = [];
    for (i = u = 0, len4 = ref4.length; u < len4; i = ++u) {
      [a, b] = ref4[i];
      pa = this.persons[a];
      pb = this.persons[b];
      pa.chair = 2 * i;
      results.push(pb.chair = 2 * i + 1);
    }
    return results;
  }

  lotta() {
    var inactive, missing, net, solution, start;
    //print @players
    this.preMatch();
    print('Lottning av rond ', this.round);
    document.title = 'Round ' + (this.round + 1);
    start = new Date();
    net = this.makeEdges(this.persons);
    print('net', net);
    solution = this.findSolution(net);
    print('solution', solution);
    missing = _.filter(solution, function(x) {
      return x === -1;
    });
    inactive = _.filter(this.persons.slice(0, this.persons.length - 1), function(p) {
      return !p.active;
    });
    print('lotta', missing.length, inactive.length);
    if (missing.length !== inactive.length) {
      print('Solution failed!');
      return;
    }
    this.pairs = this.unscramble(solution);
    print('pairs', this.pairs);
    print('cpu:', new Date() - start);
    this.postMatch();
    print('yyy', this.persons);
    downloadFile(this.makeURL(), `${this.title} R${this.round} URL.txt`);
    start = new Date();
    // if @round > 0 then downloadFile @makeMatrix(), "#{@title} R#{@round} Matrix.txt"
    downloadFile(tournament.makeStandardFile(), `${this.title} R${this.round}.txt`);
    // downloadFile @makeEdges(), "R#{@round} Net.txt"
    // downloadFile @makeStandings(), "R#{@round} Standings.txt"
    this.round += 1;
    return state = 0;
  }

  //xdraw()
  fetchURL(url = location.search) {
    var XMAX, XMIN, getParam, i, id, l, len, len1, len2, m, o, p, player, players, ref, ref1, ref2, urlParams;
    if (url === '') {
      window.location.href = "https://github.com/ChristerNilsson/Dense/blob/main/README.md";
    }
    print('fetchURL', url);
    getParam = function(name, def) {
      return urlParams.get(name) || def;
    };
    urlParams = new URLSearchParams(url);
    this.players = [];
    this.title = urlParams.get('TOUR').replaceAll('_', ' ');
    this.datum = urlParams.get('DATE') || "";
    this.rounds = parseInt(urlParams.get('ROUNDS'));
    this.round = parseInt(urlParams.get('ROUND'));
    this.expl = parseInt(getParam('EXPL', 3));
    print('expl', this.expl);
    this.first = getParam('FIRST', 'bw'); // Determines if first player has white or black in the first round
    this.sp = parseFloat(getParam('SP', 0.0)); // ScorePoints
    this.tpp = parseInt(getParam('TPP', 30)); // Tables Per Page
    this.ppp = parseInt(getParam('PPP', 60)); // Players Per Page
    // @downloads = getParam 'DOWNLOADS', 'NST' # Names Standings Tables  (URL is mandatory)
    players = urlParams.get('PLAYERS');
    players = players.replaceAll(')(', ')|(');
    players = players.replaceAll('_', ' ');
    players = '(' + players + ')';
    players = parseExpr(players);
    print('players', players);
    N = players.length;
    if (N < 4) {
      print("Error: Number of players must be 4 or more!");
      return;
    }
    if (N > 999) {
      print("Error: Number of players must be 999 or less!");
      return;
    }
    this.persons = [];
    ref = range(N);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      player = new Player(i);
      player.read(players[i]);
      this.persons.push(player);
    }
    this.paused = getParam('PAUSED', '()'); // list of zero based ids
    this.paused = parseExpr(this.paused);
    ref1 = this.paused;
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      id = ref1[m];
      this.persons[id].active = false;
    }
    print(this.persons);
    this.persons = _.sortBy(this.persons, function(player) {
      return player.elo;
    });
    this.persons = this.persons.reverse();
    XMAX = this.persons[0].elo;
    XMIN = _.last(this.persons).elo;
    ref2 = range(N);
    for (o = 0, len2 = ref2.length; o < len2; o++) {
      i = ref2[o];
      this.persons[i].id = i;
    }
    print((function() {
      var len3, q, ref3, results;
      ref3 = this.persons;
      results = [];
      for (q = 0, len3 = ref3.length; q < len3; q++) {
        p = ref3[q];
        results.push(p.elo);
      }
      return results;
    }).call(this));
    print('sorted players', this.persons); // by id AND descending elo
    if (this.round === 0) {
      this.persons.push(new Player(N, 'BYE', 0)); // Frirond ska ALLTID finnas, men kanske vara inaktiv
    }
    this.playersByName = _.sortBy(this.persons.slice(0, this.persons.length - 1), function(player) {
      return player.name;
    });
    return print('playersByName', (function() {
      var len3, q, ref3, results;
      ref3 = this.playersByName;
      results = [];
      for (q = 0, len3 = ref3.length; q < len3; q++) {
        p = ref3[q];
        results.push(p.name);
      }
      return results;
    }).call(this));
  }

  makeURL() {
    var l, len, p, players, ref, res, s;
    res = [];
    //res.push "https://christernilsson.github.io/Dense"
    res.push("http://127.0.0.1:5500");
    res.push("?TOUR=" + this.title.replaceAll(' ', '_'));
    res.push("&DATE=" + "2023-11-25");
    res.push("&ROUNDS=" + this.rounds);
    res.push("&ROUND=" + this.round);
    res.push("&PLAYERS=");
    players = [];
    ref = this.persons;
    for (l = 0, len = ref.length; l < len; l++) {
      p = ref[l];
      s = p.write();
      players.push('(' + s + ')');
    }
    players = players.join("\n");
    res = res.concat(players);
    return res.join('\n');
  }

  makeStandardFile() {
    var a, b, header0, header1, i, l, len, pa, pb, players, ref, res, timestamp;
    res = [];
    players = [];
    ref = range(this.pairs.length);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      [a, b] = this.pairs[i];
      pa = this.persons[a];
      pb = this.persons[b];
      players.push([pa, 2 * i]);
      players.push([pb, 2 * i + 1]);
    }
    players = _.sortBy(players, function(p) {
      return p[0].name;
    });
    timestamp = new Date().toLocaleString('se-SE').slice(0, 16);
    header0 = " for " + this.title + ` after Round ${this.round}    ${timestamp}`;
    header1 = " for " + this.title + ` in Round ${this.round + 1}    ${timestamp}`;
    if (this.round > 0) {
      pages[1].make(header0, res);
    }
    if (this.round < this.rounds) {
      
      // @makeNames header1,players,res
      // @makeTables header1,res
      pages[2].make(header1, players, res);
      pages[0].make(header1, res);
    }
    return res.join("\n");
  }

  distans(rounds) {
    var a, b, i, l, len, len1, m, pa, pb, ref, ref1, result;
    result = [];
    ref = range(rounds.length);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      ref1 = rounds[i];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        [a, b] = ref1[m];
        pa = tournament.persons[a];
        pb = tournament.persons[b];
        if (pa.active && pb.active) {
          result.push(abs(pa.elo - pb.elo));
        }
      }
    }
    return (sum(result) / result.length).toFixed(2);
  }

  makeCanvas() {
    var i, l, len, line, ref, result;
    result = [];
    ref = range(N);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      line = new Array(N);
      _.fill(line, '·');
      line[i] = '*';
      result.push(line);
    }
    return result;
  }

  dumpCanvas(title, average, canvas) {
    var header, i, item, l, len, nr, ordning, output, p, ref, row;
    output = ["", title];
    output.push(`Sparseness: ${average}  (Average Elo Difference) DIFF:${DIFF} COST:${COST} COLORS:${COLORS} SP:${this.sp}`);
    output.push("");
    header = ((function() {
      var l, len, ref, results;
      ref = range(N);
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        i = ref[l];
        results.push(str((i + 1) % 10));
      }
      return results;
    })()).join(' ');
    output.push('     ' + header + '   Elo    AED');
    ordning = (function() {
      var l, len, ref, results;
      ref = this.persons;
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        p = ref[l];
        results.push(p.elo);
      }
      return results;
    }).call(this);
    ref = range(canvas.length);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      row = canvas[i];
      nr = str(i + 1).padStart(3);
      output.push(`${nr}  ${((function() {
        var len1, m, results;
        results = [];
        for (m = 0, len1 = row.length; m < len1; m++) {
          item = row[m];
          results.push(str(item));
        }
        return results;
      })()).join(" ")}  ${ordning[i]} ${this.persons[i].avgEloDiff().toFixed(1).padStart(6)}`);
    }
    output.push('     ' + header);
    return output.join('\n');
  }

  drawMatrix(title, rounds) {
    var a, b, canvas, i, l, len, len1, m, ref, ref1;
    canvas = this.makeCanvas();
    ref = range(rounds.length);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      ref1 = rounds[i];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        [a, b] = ref1[m];
        if (this.persons[a].active && this.persons[b].active) {
          canvas[a][b] = ALFABET[i];
          canvas[b][a] = ALFABET[i];
        }
      }
    }
    return this.dumpCanvas(title, this.distans(rounds), canvas);
  }

  makeMatrix() {
    var l, len, len1, m, matrix, p, r, ref, ref1, res;
    matrix = [];
    ref = range(this.round);
    for (l = 0, len = ref.length; l < len; l++) {
      r = ref[l];
      res = [];
      ref1 = this.persons;
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        p = ref1[m];
        res.push([p.id, p.opp[r]]);
      }
      matrix.push(res);
    }
    return this.drawMatrix(this.title, matrix);
  }

};

Page = class Page {
  constructor() {
    this.buttons = [];
  }

  showHeader(header, round) {
    var s, y;
    y = 0.6 * ZOOM[state];
    textAlign(LEFT, CENTER);
    s = '';
    s += this.txtT(`${tournament.title} ${tournament.datum}`, 30, window.LEFT);
    s += ' ' + this.txtT(header, 15, window.CENTER);
    s += ' ' + this.txtT('Round ' + round, 26, window.RIGHT);
    return text(s, 10, y);
  }

  showFooter(y, footer) {
    var s;
    s = this.txtT(footer, 72);
    return text(s, 10, (3 + y) * ZOOM[state]);
  }

  txtT(value, w, align = window.CENTER) {
    var diff, lt, res, rt;
    if (value.length > w) {
      value = value.substring(0, w);
    }
    if (value.length < w && align === window.RIGHT) {
      value = value.padStart(w);
    }
    if (align === window.LEFT) {
      res = value + _.repeat(' ', w - value.length);
    }
    if (align === window.RIGHT) {
      res = _.repeat(' ', w - value.length) + value;
    }
    if (align === window.CENTER) {
      diff = w - value.length;
      lt = _.repeat(' ', Math.floor((1 + diff) / 2));
      rt = _.repeat(' ', Math.floor(diff / 2));
      res = lt + value + rt;
    }
    return res;
  }

  //assert "   Sven   ", txtT "Sven",10
  txt(value, x, y, align = null, color = null) {
    push();
    if (align) {
      textAlign(align, window.CENTER);
    }
    if (color) {
      fill(color);
    }
    text(value, x, y);
    return pop();
  }

};

Tables = class Tables extends Page {
  constructor() {
    var h, t, y;
    super();
    this.handleResult = this.handleResult.bind(this);
    t = tournament;
    y = 1.4 * ZOOM[state];
    h = 20;
    this.currentTable = 0;
    this.buttons = {};
    this.buttons.t = new Button('Tables', 'Shows all the table', () => {
      return setState(0);
    });
    this.buttons.n = new Button('Names', 'N = Shows names alphabetically', () => {
      return setState(1);
    });
    this.buttons.s = new Button('Standings', 'S = Shows the standings', () => {
      return setState(2);
    });
    this.buttons.p = new Button('Pairings', 'P = pause/activate and pair', () => {
      return setState(3);
    });
    this.buttons.K1 = new Button('1', '1 = White Win', () => {
      return this.handleResult(t, '1');
    });
    this.buttons[' '] = new Button('½', 'space = Draw', () => {
      return this.handleResult(t, ' ');
    });
    this.buttons.K0 = new Button('0', '0 = White Loss', () => {
      return this.handleResult(t, '0');
    });
    this.buttons.Delete = new Button('Del', 'delete = Remove result', () => {
      return this.handleDelete(t);
    });
    this.buttons.i = new Button('I', 'I = zoom In', () => {
      return zoomIn(Math.floor(N / 2));
    });
    this.buttons.o = new Button('O', 'O = zoom Out', () => {
      return zoomOut(Math.floor(N / 2));
    });
    this.buttons.r = new Button('R', 'R = Random results', () => {
      return this.fakeInput();
    });
    this.buttons.Home = new Button('', '', () => {
      return this.currentTable = 0;
    });
    this.buttons.End = new Button('', '', () => {
      return this.currentTable = tournament.pairs.length - 1;
    });
    this.buttons.ArrowLeft = new Button('', '', () => {
      return setState(3);
    });
    this.buttons.ArrowRight = new Button('', '', () => {
      return setState(1);
    });
    this.buttons.ArrowUp = new Button('', '', () => {
      this.currentTable = modulo(this.currentTable - 1, tournament.pairs.length);
      return event.preventDefault();
    });
    this.buttons.ArrowDown = new Button('', '', () => {
      this.currentTable = modulo(this.currentTable + 1, tournament.pairs.length);
      return event.preventDefault();
    });
    this.buttons.t.active = false;
    spread(this.buttons, 0.6 * ZOOM[state], y, h);
  }

  mousePressed() {
    var button, key, results;
    if (mouseY > 4 * ZOOM[state]) {
      return this.currentTable = int(mouseY / ZOOM[state] - 4.5);
    } else {
      results = [];
      for (key in this.buttons) {
        button = this.buttons[key];
        if (button.inside(mouseX, mouseY)) {
          results.push(button.click());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }

  keyPressed(event, key) {
    if (indexOf.call('01', key) >= 0) {
      key = 'K' + key;
    }
    if (!(key in this.buttons)) {
      return;
    }
    return this.buttons[key].click();
  }

  elo_probabilities(R_W, R_B, draw = 0.2) {
    var E_W, index, loss, win, x;
    E_W = 1 / (1 + 10 ** ((R_B - R_W) / 400));
    win = E_W - draw / 2;
    loss = (1 - E_W) - draw / 2;
    x = _.random(0, 1, true);
    index = 2;
    if (x < loss + draw) {
      index = 1;
    }
    if (x < loss) {
      index = 0;
    }
    return index;
  }

  handleResult(t, key) {
    var a, b, ch, index, pa, pb;
    boundMethodCheck(this, Tables);
    [a, b] = t.pairs[this.currentTable];
    pa = t.persons[a];
    pb = t.persons[b];
    index = '0 1'.indexOf(key);
    ch = "012"[index];
    if (pa.res.length === pa.col.length) {
      if (ch !== _.last(pa.res)) {
        errors.push(this.currentTable);
        print('errors', errors);
      }
    } else {
      if (pa.res.length < pa.col.length) {
        pa.res += "012"[index];
      }
      if (pb.res.length < pb.col.length) {
        pb.res += "210"[index];
      }
    }
    return this.currentTable = modulo(this.currentTable + 1, tournament.pairs.length);
  }

  fakeInput() {
    var a, b, currentTable, i, l, len, pa, pb, ref, res, results;
    currentTable = 0;
    ref = range(tournament.pairs.length);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      [a, b] = tournament.pairs[i];
      pa = tournament.persons[a];
      pb = tournament.persons[b];
      res = this.elo_probabilities(pa.elo, pb.elo);
      if (pa.res.length < pa.col.length) {
        pa.res += "012"[res];
      }
      if (pb.res.length < pb.col.length) {
        results.push(pb.res += "210"[res]);
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  handleDelete() {
    var a, b, e, i, pa, pb;
    [a, b] = tournament.pairs[this.currentTable];
    pa = tournament.persons[a];
    pb = tournament.persons[b];
    i = this.currentTable;
    errors = (function() {
      var l, len, results;
      results = [];
      for (l = 0, len = errors.length; l < len; l++) {
        e = errors[l];
        if (e !== i) {
          results.push(e);
        }
      }
      return results;
    })();
    if (pa.res.length === pb.res.length) {
      [a, b] = tournament.pairs[i];
      pa = tournament.persons[a];
      pb = tournament.persons[b];
      pa.res = pa.res.substring(0, pa.res.length - 1);
      pb.res = pb.res.substring(0, pb.res.length - 1);
    }
    return this.currentTable = modulo(this.currentTable + 1, tournament.pairs.length);
  }

  make(header, res) {
    var a, b, i, l, len, pa, pb, ref, results;
    res.push("TABLES" + header);
    res.push("");
    ref = range(tournament.pairs.length);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      [a, b] = tournament.pairs[i];
      if (i % tournament.tpp === 0) {
        res.push(`Table      ${RINGS.w}`.padEnd(25) + _.pad("", 28 + 10) + `${RINGS.b}`);
      }
      pa = tournament.persons[a];
      pb = tournament.persons[b];
      res.push("");
      res.push(_.pad(i + 1, 6) + pa.elo + ' ' + this.txtT(pa.name, 25, window.LEFT) + ' ' + _.pad("|____| - |____|", 20) + ' ' + pb.elo + ' ' + this.txtT(pb.name, 25, window.LEFT));
      if (i % tournament.tpp === tournament.tpp - 1) {
        results.push(res.push("\f"));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  draw() {
    var a, b, both, button, i, key, l, len, nr, pa, pb, ref, results, s, y;
    fill('white');
    this.showHeader('', tournament.round);
    for (key in this.buttons) {
      button = this.buttons[key];
      button.draw();
    }
    y = 4.0 * ZOOM[state];
    s = "";
    s += this.txtT('Tbl', 3, window.RIGHT);
    s += ' ' + this.txtT('Elo', 4, window.RIGHT);
    s += ' ' + this.txtT('White', 25, window.LEFT);
    s += ' ' + this.txtT('Result', 7, window.CENTER);
    s += ' ' + this.txtT('Black', 25, window.LEFT);
    s += ' ' + this.txtT('Elo', 4, window.RIGHT);
    textAlign(window.LEFT);
    text(s, 10, y);
    ref = range(tournament.pairs.length);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      [a, b] = tournament.pairs[i];
      a = tournament.persons[a];
      b = tournament.persons[b];
      y += ZOOM[state];
      pa = myRound(a.score(), 1);
      pb = myRound(b.score(), 1);
      both = a.res.length === a.col.length ? prBoth(_.last(a.res)) : "   -   ";
      nr = i + 1;
      s = "";
      s += this.txtT(nr.toString(), 3, window.RIGHT);
      s += ' ' + this.txtT(a.elo.toString(), 4, window.RIGHT);
      s += ' ' + this.txtT(a.name, 25, window.LEFT);
      s += ' ' + this.txtT(both, 7, window.CENTER);
      s += ' ' + this.txtT(b.name, 25, window.LEFT);
      s += ' ' + this.txtT(b.elo.toString(), 4, window.RIGHT);
      if (i === this.currentTable) {
        fill('yellow');
        noStroke();
        rect(0, y - 0.6 * ZOOM[state], width, ZOOM[state]);
        fill('black');
      } else {
        if (indexOf.call(errors, i) >= 0) {
          fill('red');
        } else {
          fill('black');
        }
      }
      results.push(text(s, 10, y));
    }
    return results;
  }

};

Names = class Names extends Page {
  constructor() {
    var h, t, y;
    super();
    t = tournament;
    y = 1.4 * ZOOM[state];
    h = 20;
    this.currentPlayer = 0;
    this.buttons = {};
    this.buttons.t = new Button('Tables', 'T = Tables', () => {
      return setState(0);
    });
    this.buttons.n = new Button('Names', 'Names', () => {
      return setState(1); 
    });
    this.buttons.s = new Button('Standings', 'S = Standings', () => {
      return setState(2);
    });
    this.buttons.p = new Button('Pairings', 'P = pause/activate and pair', () => {
      return setState(3);
    });
    this.buttons.i = new Button('I', 'I = zoom In', () => {
      return zoomIn(N);
    });
    this.buttons.o = new Button('O', 'O = zoom Out', () => {
      return zoomOut(N);
    });
    this.buttons.ArrowLeft = new Button('', '', () => {
      return setState(0);
    });
    this.buttons.ArrowRight = new Button('', '', () => {
      return setState(2);
    });
    this.buttons.ArrowUp = new Button('', '', () => {
      this.currentPlayer = modulo(this.currentPlayer - 1, N);
      return event.preventDefault();
    });
    this.buttons.ArrowDown = new Button('', '', () => {
      this.currentPlayer = modulo(this.currentPlayer + 1, N);
      return event.preventDefault();
    });
    this.buttons.n.active = false;
    spread(this.buttons, 0.6 * ZOOM[state], y, h);
  }

  mousePressed() {
    var button, key, results;
    if (mouseY > 4 * ZOOM[state]) {
      return this.currentPlayer = int(mouseY / ZOOM[state] - 4.5);
    } else {
      results = [];
      for (key in this.buttons) {
        button = this.buttons[key];
        if (button.inside(mouseX, mouseY)) {
          results.push(button.click());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }

  keyPressed(event, key) {
    return this.buttons[key].click();
  }

  make(header, players, res) { // players sorterad på namn
    var i, l, len, len1, m, p, r, temp;
    temp = _.clone(players);
    temp.sort(function(a, b) {
      return b[0].eloSum() - a[0].eloSum();
    });
    for (i = l = 0, len = temp.length; l < len; i = ++l) {
      p = temp[i];
      p[0].position = "";
      if (p[0].eloSum() > 0) {
        p[0].position = `#${i + 1}`;
      }
    }
    res.push("NAMES" + header);
    res.push("");
    r = tournament.round;
    for (i = m = 0, len1 = players.length; m < len1; i = ++m) {
      p = players[i];
      if (i % this.ppp === 0) {
        res.push("Table Name");
      }
      res.push(`${str(1 + Math.floor(p[1] / 2)).padStart(3)} ${RINGS[p[0].col[r][0]]} ${p[0].name} ${p[0].position}`);
      if (i % this.ppp === this.ppp - 1) {
        res.push("\f");
      }
    }
    return res.push("\f");
  }

  draw() {
    var button, i, key, l, len, len1, m, p, player, playersByEloSum, r, ref, results, s, y;
    fill('white');
    this.showHeader('', tournament.round);
    y = 4.0 * ZOOM[state];
    s = "";
    s += this.txtT('Table', 6, window.LEFT);
    s += this.txtT('Name', 25, window.LEFT);
    s += this.txtT('Pos', 4, window.RIGHT);
    textAlign(window.LEFT);
    text(s, 10, y);
    playersByEloSum = _.clone(tournament.persons);
    playersByEloSum.sort(function(a, b) {
      return b.eloSum() - a.eloSum();
    });
    for (i = l = 0, len = playersByEloSum.length; l < len; i = ++l) {
      player = playersByEloSum[i];
      p = tournament.persons[player.id];
      p.position = "";
      if (p.eloSum() > 0) {
        p.position = `${i + 1}`;
      }
    }
    fill('black');
    r = tournament.round - 1;
    ref = tournament.playersByName;
    for (i = m = 0, len1 = ref.length; m < len1; i = ++m) {
      p = ref[i];
      y += ZOOM[state];
      s = "";
      if (tournament.round === 0) {
        s += p.active ? '      ' : ' paus ';
        s += this.txtT(p.name, 25, window.LEFT);
      } else {
        if (p.active && p.name !== 'BYE') {
          s += this.txtT((1 + Math.floor(p.chair / 2)).toString(), 3, window.RIGHT);
          s += this.txtT(RINGS[p.col[r][0]], 3, window.CENTER);
          s += this.txtT(p.name, 25, window.LEFT);
          s += this.txtT(p.position.toString(), 4, window.RIGHT);
        } else {
          s += '      ';
          s += this.txtT(p.name, 25, window.LEFT);
        }
      }
      if (i === this.currentPlayer) {
        fill('yellow');
        noStroke();
        rect(0, y - 0.6 * ZOOM[state], width, ZOOM[state]);
        fill('black');
      }
      text(s, 10, y);
    }
    results = [];
    for (key in this.buttons) {
      button = this.buttons[key];
      results.push(button.draw());
    }
    return results;
  }

};

Standings = class Standings extends Page {
  constructor() {
    var h, t, y;
    super();
    t = tournament;
    y = 1.4 * ZOOM[state];
    h = 20;
    this.buttons = {};
    this.buttons.t = new Button('Tables', 'T = Tables', () => {
      return setState(0);
    });
    this.buttons.n = new Button('Names', 'N = Names', () => {
      return setState(1);
    });
    this.buttons.s = new Button('Standings', 'Standings', () => {
      return setState(2);
    });
    this.buttons.p = new Button('Pairings', 'P = pause/activate and pair', () => {
      return setState(3);
    });
    this.buttons.i = new Button('I', 'I = zoom In', () => {
      return zoomIn(N);
    });
    this.buttons.o = new Button('O', 'O = zoom Out', () => {
      return zoomOut(N);
    });
    this.buttons.ArrowLeft = new Button('', '', () => {
      return setState(1);
    });
    this.buttons.ArrowRight = new Button('', '', () => {
      return setState(3);
    });
    this.buttons.s.active = false;
    spread(this.buttons, 0.6 * ZOOM[state], y, h);
  }

  mousePressed() {
    var button, key, results;
    results = [];
    for (key in this.buttons) {
      button = this.buttons[key];
      if (button.inside(mouseX, mouseY)) {
        results.push(button.click());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  keyPressed(event, key) {
    return this.buttons[key].click();
  }

  make(header, res) {
    var elo, i, inv, key, l, len, len1, len2, len3, m, o, p, person, q, r, ref, ref1, ref2, s, temp, terms;
    if (tournament.pairs.length === 0) {
      res.push("This ROUND can't be paired! (Too many rounds)");
    }
    temp = _.clone(tournament.persons);
    temp.sort(function(a, b) {
      var diff;
      diff = b.eloSum() - a.eloSum();
      if (diff !== 0) {
        return diff;
      }
      return b.elo - a.elo;
    });
    inv = invert((function() {
      var l, len, results;
      results = [];
      for (l = 0, len = temp.length; l < len; l++) {
        p = temp[l];
        results.push(p.id);
      }
      return results;
    })());
    res.push("STANDINGS" + header);
    res.push("");
    header = "";
    header += this.txtT("#", 2);
    header += ' ' + this.txtT("Elo", 4, window.RIGHT);
    header += ' ' + this.txtT("Name", 25, window.LEFT);
    ref = range(tournament.round);
    for (l = 0, len = ref.length; l < len; l++) {
      r = ref[l];
      header += this.txtT(`${r + 1}`, 6, window.RIGHT);
    }
    header += '  ' + this.txtT("EloSum", 8, window.RIGHT);
    if (tournament.round <= this.expl) {
      header += '  ' + this.txtT("Explanation", 12, window.LEFT);
    }
    for (i = m = 0, len1 = temp.length; m < len1; i = ++m) {
      person = temp[i];
      if (i % tournament.ppp === 0) {
        res.push(header);
      }
      s = "";
      s += this.txtT((1 + i).toString(), 2, window.RIGHT);
      s += ' ' + this.txtT(person.elo.toString(), 4, window.RIGHT);
      s += ' ' + this.txtT(person.name, 25, window.LEFT);
      s += ' ';
      ref1 = range(tournament.round);
      for (o = 0, len2 = ref1.length; o < len2; o++) {
        r = ref1[o];
        if (person.opp[r] === -1) {
          s += '      ';
        } else {
          s += this.txtT(`${1 + inv[person.opp[r]]}${RINGS[person.col[r][0]]}${"0½1"[person.res[r]]}`, 6, window.RIGHT);
        }
      }
      s += ' ' + this.txtT(person.eloSum().toFixed(1), 8, window.RIGHT);
      terms = [];
      print('expl', tournament.round, this.expl, tournament.round < this.expl);
      if (tournament.round <= this.expl) {
        ref2 = range(tournament.round);
        for (q = 0, len3 = ref2.length; q < len3; q++) {
          r = ref2[q];
          if (person.opp[r] === -1) {
            terms.push("0 * 0");
          } else {
            key = person.col[r][0] + person.res[r];
            elo = this.persons[person.opp[r]].elo;
            terms.push(`${tournament.bonus[key]} * ${elo}`);
          }
        }
        s += '  (' + terms.join(' + ') + ')';
      }
      res.push(s);
      if (i % tournament.ppp === tournament.ppp - 1) {
        res.push("\f");
      }
    }
    return res.push("\f");
  }

  lightbulb(color, x, y, result, opponent) {
    var strokeWeight;
    if (result === "") {
      return;
    }
    push();
    result = '012'.indexOf(result);
    fill('red gray green'.split(' ')[result]);
    rectMode(window.CENTER);
    rect(x, y, 0.84 * ZOOM[state], 0.9 * ZOOM[state]);
    fill({
      b: 'black',
      ' ': 'yellow',
      w: 'white'
    }[color]);
    noStroke();
    strokeWeight = 0;
    this.txt(opponent, x, y + 1, window.CENTER);
    return pop();
  }

  draw() {
    var button, i, inv, key, l, len, len1, m, p, person, playersByEloSum, r, ref, results, rheader, s, x, y;
    noStroke();
    fill('white');
    this.showHeader('', tournament.round - 1);
    // if tournament.pairs.length == 0
    // 	print "This ROUND can't be paired! (Too many rounds)"
    // 	return
    playersByEloSum = _.clone(tournament.persons.slice(0, N));
    playersByEloSum.sort(function(a, b) {
      var diff;
      diff = b.eloSum() - a.eloSum();
      if (diff !== 0) {
        return diff;
      }
      return b.elo - a.elo;
    });
    inv = invert((function() {
      var l, len, results;
      results = [];
      for (l = 0, len = playersByEloSum.length; l < len; l++) {
        p = playersByEloSum[l];
        results.push(p.id);
      }
      return results;
    })());
    y = 4.0 * ZOOM[state];
    textAlign(LEFT);
    rheader = _.map(range(1, tournament.rounds + 1), function(i) {
      return `${i % 10} `;
    });
    rheader = rheader.join(' ');
    s = "";
    s += this.txtT("Pos", 3, window.RIGHT);
    s += ' ' + this.txtT("Elo", 4, window.RIGHT);
    s += ' ' + this.txtT("Name", 25, window.LEFT);
    s += ' ' + this.txtT(rheader, 3 * this.rounds, window.LEFT);
    s += ' ' + this.txtT("EloSum", 7, window.RIGHT);
    text(s, 10, y);
    fill('black');
    for (i = l = 0, len = playersByEloSum.length; l < len; i = ++l) {
      person = playersByEloSum[i];
      // print "Standings.draw: #{person}"
      y += ZOOM[state];
      s = "";
      s += this.txtT((1 + i).toString(), 3, window.RIGHT);
      s += ' ' + this.txtT(person.elo.toString(), 4, window.RIGHT);
      s += ' ' + this.txtT(person.name, 25, window.LEFT);
      s += ' ' + this.txtT('', 3 * tournament.rounds, window.CENTER);
      s += ' ' + this.txtT(person.eloSum().toFixed(1), 7, window.RIGHT);
      text(s, 10, y);
      ref = range(tournament.round - 1);
      for (m = 0, len1 = ref.length; m < len1; m++) {
        r = ref[m];
        x = ZOOM[state] * (10.85 + 0.9 * r);
        if (person.opp[r] === -1) {
          this.txt("P", x, y + 1, window.CENTER, 'black');
        } else if (person.opp[r] === N) {
          this.txt("BYE", x, y + 1, window.CENTER, 'black');
        } else {
          this.lightbulb(person.col[r][0], x, y, person.res[r], 1 + inv[person.opp[r]]);
        }
      }
    }
    results = [];
    for (key in this.buttons) {
      button = this.buttons[key];
      results.push(button.draw());
    }
    return results;
  }

};

Pairings = class Pairings extends Page {
  constructor() {
    var h, t, y;
    super();
    t = tournament;
    y = 1.3 * ZOOM[state];
    h = 20;
    this.currentPlayer = 0;
    this.buttons = {};
    this.buttons.t = new Button('Tables', 'T = Tables', () => {
      return setState(0);
    });
    this.buttons.n = new Button('Names', 'N = Names', () => {
      return setState(1);
    });
    this.buttons.s = new Button('Standings', 'S = Standings', () => {
      return setState(2);
    });
    this.buttons._ = new Button('Pairings', 'Pair', () => {
      return setState(3); 
    });
    this.buttons[' '] = new Button('toggle', 'space = Toggles paused/active', () => {
      return tournament.playersByName[this.currentPlayer].toggle();
    });
    this.buttons.p = new Button('Pair', 'P = Perform pairing', () => {
      return tournament.lotta();
    });
    this.buttons.i = new Button('I', 'I = zoom In', () => {
      return zoomIn(Math.floor(N / 2));
    });
    this.buttons.o = new Button('O', 'O = zoom Out', () => {
      return zoomOut(Math.floor(N / 2));
    });
    this.buttons.ArrowLeft = new Button('', '', () => {
      return setState(2);
    });
    this.buttons.ArrowRight = new Button('', '', () => {
      return setState(0);
    });
    this.buttons.ArrowUp = new Button('', '', () => {
      this.currentPlayer = modulo(this.currentPlayer - 1, N);
      return event.preventDefault();
    });
    this.buttons.ArrowDown = new Button('', '', () => {
      this.currentPlayer = modulo(this.currentPlayer + 1, N);
      return event.preventDefault();
    });
    this.buttons._.active = false;
    spread(this.buttons, 0.6 * ZOOM[state], y, h);
  }

  mousePressed() {
    var button, key, results;
    if (mouseY > 4 * ZOOM[state]) {
      return this.currentPlayer = int(mouseY / ZOOM[state] - 4.5);
    } else {
      results = [];
      for (key in this.buttons) {
        button = this.buttons[key];
        if (button.inside(mouseX, mouseY)) {
          results.push(button.click());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }

  keyPressed(event, key) {
    return this.buttons[key].click();
  }

  draw() {
    var button, i, key, l, len, p, r, ref, results, s, y;
    fill('white');
    this.showHeader('Pairings', tournament.round);
    y = 4.0 * ZOOM[state];
    s = "State Name";
    textAlign(window.LEFT);
    text(s, 10, y);
    fill('black');
    r = tournament.round - 1;
    ref = tournament.playersByName;
    for (i = l = 0, len = ref.length; l < len; i = ++l) {
      p = ref[i];
      y += ZOOM[state];
      s = p.active ? '      ' : ' paus ';
      s += this.txtT(p.name, 25, window.LEFT);
      if (i === this.currentPlayer) {
        fill('yellow');
        noStroke();
        rect(0, y - 0.5 * ZOOM[state], width, ZOOM[state]);
        fill('black');
      }
      text(s, 10, y);
    }
    results = [];
    for (key in this.buttons) {
      button = this.buttons[key];
      results.push(button.draw());
    }
    return results;
  }

};

zoomIn = function(n) {
  ZOOM[state]--;
  return resizeCanvas(windowWidth - 4, (4.5 + n) * ZOOM[state]);
};

zoomOut = function(n) {
  ZOOM[state]++;
  return resizeCanvas(windowWidth - 4, (4.5 + n) * ZOOM[state]);
};

sum = function(s) {
  var item, l, len, res;
  res = 0;
  for (l = 0, len = s.length; l < len; l++) {
    item = s[l];
    res += parseFloat(item);
  }
  return res;
};

assert(6, sum('012012'));

downloadFile = function(txt, filename) {
  var a, blob, url;
  blob = new Blob([txt], {
    type: 'text/plain'
  });
  url = URL.createObjectURL(blob);
  a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  return URL.revokeObjectURL(url);
};

prBoth = function(score) {
  return ` ${'0½1'[score]} - ${'1½0'[score]} `;
};

invert = function(arr) {
  var i, l, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    res[arr[i]] = i;
  }
  return res;
};

assert([0, 1, 2, 3], invert([0, 1, 2, 3]));

assert([3, 2, 0, 1], invert([2, 3, 1, 0]));

assert([2, 3, 1, 0], invert(invert([2, 3, 1, 0])));

window.windowResized = function() {
  if (state === 0) {
    resizeCanvas(windowWidth - 4, (4.5 + Math.floor(N / 2)) * ZOOM[state]);
  }
  if (state === 1 || state === 2 || state === 3) {
    return resizeCanvas(windowWidth - 4, (4.5 + N) * ZOOM[state]);
  }
};

// xdraw()
window.setup = function() {
  textFont('Courier New');
  // textAlign window.LEFT,window.TOP
  textAlign(CENTER, CENTER);
  rectMode(window.CORNER);
  tournament = new Tournament();
  // tournament.lotta()
  pages = [new Tables(), new Standings(), new Names(), new Pairings()];
  state = 3;
  return window.windowResized();
};

window.draw = function() {
  background('gray');
  textSize(ZOOM[state]);
  return pages[state].draw();
};

window.mousePressed = function(event) {
  return pages[state].mousePressed(event);
};

setState = function(newState) {
  state = newState;
  if (state === 0) {
    return resizeCanvas(windowWidth - 4, (4.5 + Math.floor(N / 2)) * ZOOM[state]);
  } else {
    return resizeCanvas(windowWidth - 4, (4.5 + N) * ZOOM[state]);
  }
};

window.keyPressed = function(event) {
  var l, len, p, ref;
  // om något resultat saknas för en aktiv spelare, ska ingen lottning ske
  if (indexOf.call('pP', key) >= 0) {
    ref = tournament.persons;
    for (l = 0, len = ref.length; l < len; l++) {
      p = ref[l];
      if (p.active && p.res.length < p.col.length) {
        print('Pairings kan ej nås pga att resultat saknas för bl a', `${p}`);
        return;
      }
    }
  }
  return pages[state].keyPressed(event, key);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\Dense\coffee\dense.coffee