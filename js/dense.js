// Generated by CoffeeScript 2.7.0
var ALFABET, ASCII, COLORS, COST, DIFF, NAMES, PAIRINGS, RINGS, STANDINGS, TABLES, assert, datum, downloadFile, errors, ints2strings, invert, message, myRound, normera, ok, other, prBoth, res2string, resultat, showType, sum, xxx,
  indexOf = [].indexOf;

import {
  parseExpr
} from './parser.js';

import {
  Edmonds
} from './mattkrick.js';

import {
  g,
  print,
  range
} from './globals.js';

import {
  Button,
  spread
} from './button.js';

import {
  Lista
} from './lista.js';

import {
  Tournament
} from './tournament.js';

import {
  Tables
} from './tables.js';

import {
  Names
} from './names.js';

import {
  Standings
} from './standings.js';

import {
  Pairings
} from './pairings.js';


// parameters that somewhat affects matching
COST = 'QUADRATIC'; // QUADRATIC=1.01 or LINEAR=1

DIFF = 'ID'; // ID or ELO

COLORS = 1; // 1 or 2

TABLES = 0;

NAMES = 1;

STANDINGS = 2;

PAIRINGS = 3;

g.LPP = 14;

RINGS = {
  'b': '•',
  ' ': ' ',
  'w': 'o'
};

ASCII = '0123456789abcdefg';

ALFABET = '123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'; // 62 ronder maximalt

datum = '';

g.tournament = null;

errors = []; // id för motsägelsefulla resultat. Tas bort med Delete

g.pages = [];

resultat = []; // 012 sorterad på id

message = ''; //This is a tutorial g.tournament. Use it or edit the URL'

showType = function(a) {
  if (typeof a === 'string') {
    return `'${a}'`;
  } else {
    return a;
  }
};

//assert = (a,b) -> if not _.isEqual a,b then print "Assert failure: #{showType a} != #{showType b}"
assert = function(a, b) {
  if (!_.isEqual(a, b)) {
    return print(`Assert failure: ${JSON.stringify(a)} != ${JSON.stringify(b)}`);
  }
};

ok = function(p0, p1) {
  var ref;
  return p0.id !== p1.id && (ref = p0.id, indexOf.call(p1.opp, ref) < 0) && abs(p0.balans() + p1.balans()) <= COLORS;
};

other = function(col) {
  if (col === 'b') {
    return 'w';
  } else {
    return 'b';
  }
};

myRound = function(x, decs) {
  return x.toFixed(decs);
};

assert("2.0", myRound(1.99, 1));

assert("0.6", myRound(0.61, 1));

ints2strings = function(ints) {
  return `${ints}`;
};

assert("1,2,3", ints2strings([1, 2, 3]));

assert("1", ints2strings([1]));

assert("", ints2strings([]));

res2string = function(ints) {
  var i;
  return ((function() {
    var j, len, results;
    results = [];
    for (j = 0, len = ints.length; j < len; j++) {
      i = ints[j];
      results.push(i.toString());
    }
    return results;
  })()).join('');
};

assert("123", res2string([1, 2, 3]));

assert("1", res2string([1]));

assert("", res2string([]));

xxx = [[2, 1], [12, 2], [12, 1], [3, 4]];

xxx.sort(function(a, b) {
  var diff;
  diff = a[0] - b[0];
  if (diff === 0) {
    return a[1] - b[1];
  } else {
    return diff;
  }
});

assert([[2, 1], [3, 4], [12, 1], [12, 2]], xxx);

assert(true, [2] > [12]);

assert(true, "2" > "12");

assert(false, 2 > 12);

// xxx = [[2,1],[12,2],[12,1],[3,4]]
// assert [[2,1],[12,1],[12,2],[3,4]], _.sortBy(xxx, (x) -> [x[0],x[1]])
// assert [[3,4],[2,1],[12,1],[12,2]], _.sortBy(xxx, (x) -> -x[0])
// assert [[2,1],[12,1],[3,4],[12,2]], _.sortBy(xxx, (x) -> x[1])
// assert [[3,4],[12,1],[2,1],[12,2]], _.sortBy(xxx, (x) -> -x[1])
normera = function(a, b, k) {
  return Math.round((b - k * a) / (k - 1)); // Räknar ut vad som ska adderas till elotalen
};

assert(-406, normera(1406, 2406, 2)); // 1000,2000

assert(-1900, normera(1950, 2000, 2)); //   50,100

assert(0, normera(1000, 2000, 2)); // 1000,2000

assert(200, normera(900, 2000, 2)); // 1100,2200

assert(-1200, normera(1600, 2000, 2)); //  400,800

assert(-500, normera(1000, 2000, 3)); //  500,1500

assert(-1000, normera(1200, 1800, 4)); //  200,800

assert(-1067, normera(1400, 2400, 4)); //  333,1333

assert(-800, normera(1600, 2000, 1.5)); //  800,1200

assert(400, normera(1600, 2000, 1.2)); // 2000,2400

assert(2400, normera(1600, 2000, 1.1)); // 4000,4400

sum = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += parseFloat(item);
  }
  return res;
};

assert(6, sum('012012'));

downloadFile = function(txt, filename) {
  var a, blob, url;
  blob = new Blob([txt], {
    type: 'text/plain'
  });
  url = URL.createObjectURL(blob);
  a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  return URL.revokeObjectURL(url);
};

prBoth = function(score) {
  return ` ${'0½1'[score]} - ${'1½0'[score]} `;
};

invert = function(arr) {
  var i, j, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res[arr[i]] = i;
  }
  return res;
};

assert([0, 1, 2, 3], invert([0, 1, 2, 3]));

assert([3, 2, 0, 1], invert([2, 3, 1, 0]));

assert([2, 3, 1, 0], invert(invert([2, 3, 1, 0])));

window.windowResized = function() {
  resizeCanvas(windowWidth, windowHeight - 4);
  return g.LPP = Math.floor(height / g.ZOOM[g.state]) - 4;
};

window.setup = function() {
  createCanvas(windowWidth - 4, windowHeight - 4);
  textFont('Courier New');
  // textAlign window.LEFT,window.TOP
  textAlign(CENTER, CENTER);
  rectMode(window.CORNER);
  g.ZOOM = [
    20,
    20,
    20,
    20 // vertical line distance for four states
  ];
  g.state = g.TABLES;
  g.tournament = new Tournament();
  g.N = 0; // number of players
  g.tournament = new Tournament();
  // g.tournament.lotta()
  g.state = 3;
  g.pages = [new Tables(), new Names(), new Standings(), new Pairings()];
  print(g.pages);
  return window.windowResized();
};

window.draw = function() {
  background('gray');
  textSize(g.ZOOM[g.state]);
  return g.pages[g.state].draw();
};

window.mousePressed = function(event) {
  return g.pages[g.state].mousePressed(event);
};

window.mouseWheel = function(event) {
  return g.pages[g.state].mouseWheel(event);
};

window.keyPressed = function(event) {
  return g.pages[g.state].keyPressed(event, key);
};

// om något resultat saknas för en aktiv spelare, ska ingen lottning ske
// if key in 'pP'
// 	for p in g.tournament.persons
// 		if p.active and p.res.length < p.col.length
// 			print 'Pairings kan ej nås pga att resultat saknas för bl a',"#{p}"
// 			return

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\Dense\coffee\dense.coffee