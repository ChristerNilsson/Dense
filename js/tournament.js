// Generated by CoffeeScript 2.7.0
import {
  g,
  range,
  print,
  scalex,
  scaley
} from './globals.js';

import {
  parseExpr
} from './parser.js';

import {
  Player
} from './player.js';

import {
  Edmonds
} from './mattkrick.js';

import {
  Tables
} from './page_tables.js';

import {
  Names
} from './page_names.js';

import {
  Standings
} from './page_standings.js';

import {
  Active
} from './page_active.js';

export var Tournament = class Tournament {
  constructor() {
    this.title = '';
    //@rounds = 0
    this.round = 0;
    this.sp = 0.0; // 0.01
    this.tpp = 30;
    this.ppp = 60;
    // dessa tre listor pekar på samma objekt
    this.players = [];
    this.persons = []; // stabil, sorterad på id och elo
    this.pairs = []; // varierar med varje rond
    this.robin = range(g.N);
    // @fetchURL()
    this.mat = [];
    this.bonus = {
      'w2': 1,
      'b2': 1 + 2 * this.sp,
      'w1': 0.5 - this.sp,
      'b1': 0.5 + this.sp,
      'w0': 0,
      'b0': 0
    };
  }

  write() {}

  makeEdges() {
    var a, b, cost, diff, edges, k, l, len, len1, pa, pb, ref, ref1;
    edges = [];
    ref = range(g.N);
    // tag med frironden
    for (k = 0, len = ref.length; k < len; k++) {
      a = ref[k];
      pa = this.persons[a];
      if (!pa.active) {
        continue;
      }
      ref1 = range(a + 1, g.N);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        b = ref1[l];
        pb = this.persons[b];
        if (!pb.active) {
          continue;
        }
        if (g.DIFF === 'ELO') {
          diff = abs(pa.elo - pb.elo);
        }
        if (g.DIFF === 'ID') {
          diff = abs(pa.id - pb.id);
        }
        if (g.COST === 'LINEAR') {
          cost = 2000 - diff;
        }
        if (g.COST === 'QUADRATIC') {
          cost = 2000 - diff ** 1.01;
        }
        if (g.ok(pa, pb)) {
          edges.push([pa.id, pb.id, cost]);
        }
      }
    }
    return edges;
  }

  findSolution(edges) {
    var edmonds;
    edmonds = new Edmonds(edges);
    return edmonds.maxWeightMatching(edges);
  }

  flip(p0, p1) { // p0 byter färg, p0 anpassar sig
    var col0, col1;
    col0 = _.last(p0.col);
    col1 = col0;
    col0 = other(col0);
    p0.col += col0;
    return p1.col += col1;
  }

  assignColors(p0, p1) {
    var b0, b1, x;
    b0 = p0.balans();
    b1 = p1.balans();
    if (b0 < b1) {
      x = 0;
    } else if (b0 > b1) {
      x = 1;
    } else if (p0.id < p1.id) {
      x = 0;
    } else {
      x = 1;
    }
    p0.col += 'wb'[x];
    return p1.col += 'bw'[x];
  }

  unscramble(solution) { // [5,3,4,1,2,0] => [[0,5],[1,3],[2,4]]
    var i, j, k, len, ref, result;
    solution = _.clone(solution);
    result = [];
    ref = range(solution.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (solution[i] !== -1) {
        j = solution[i];
        result.push([
          i,
          j //[@players[i].id,@players[j].id]
        ]);
        solution[j] = -1;
        solution[i] = -1;
      }
    }
    return result;
  }

  preMatch() {
    var active, k, len, p, ref;
    ref = this.persons;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      if (p.res.length < p.col.length) {
        p.res += '0';
      }
    }
    return active = _.filter(this.persons.slice(0, this.persons.length - 1), function(p) {
      return p.active;
    });
  }

  // @persons[g.N].active = active.length % 2 == 1
  postMatch() {
    var a, b, col0, col1, i, k, l, len, len1, len2, len3, len4, m, n, o, p, pa, pb, ref, ref1, ref2, ref3, ref4, results;
    ref = this.persons;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      if (p.active) {
        continue;
      }
      p.opp.push(-1);
      // p.res += '0'
      p.col += ' ';
    }
    ref1 = this.pairs;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      [a, b] = ref1[l];
      pa = this.persons[a];
      pb = this.persons[b];
      pa.opp.push(pb.id);
      pb.opp.push(pa.id);
    }
    // print @persons
    if (this.round === 0) {
      ref2 = range(this.pairs.length);
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        i = ref2[m];
        [a, b] = this.pairs[i];
        pa = this.persons[a];
        pb = this.persons[b];
        col1 = "bw"[i % 2];
        col0 = g.other(col1);
        pa.col += col0;
        pb.col += col1;
        if (i % 2 === 1) {
          this.pairs[i].reverse();
        }
      }
    } else {
      ref3 = range(this.pairs.length);
      for (n = 0, len3 = ref3.length; n < len3; n++) {
        i = ref3[n];
        [a, b] = this.pairs[i];
        pa = this.persons[a];
        pb = this.persons[b];
        this.assignColors(pa, pb);
        if (pa.col[this.round] === 'b') {
          this.pairs[i].reverse();
        }
      }
    }
    ref4 = this.pairs;
    results = [];
    for (i = o = 0, len4 = ref4.length; o < len4; i = ++o) {
      [a, b] = ref4[i];
      pa = this.persons[a];
      pb = this.persons[b];
      pa.chair = 2 * i;
      results.push(pb.chair = 2 * i + 1);
    }
    return results;
  }

  downloadFile(txt, filename) {
    var a, blob, url;
    blob = new Blob([txt], {
      type: 'text/plain'
    });
    url = URL.createObjectURL(blob);
    a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    return URL.revokeObjectURL(url);
  }

  lotta() {
    var inactive, k, len, missing, net, p, ref, solution, start;
    g.calcMissing();
    if (this.round > 0) {
      missing = 0;
      ref = this.persons;
      for (k = 0, len = ref.length; k < len; k++) {
        p = ref[k];
        if (p.active && p.res.length < p.col.length) {
          missing++;
        }
      }
      if (missing > 0) {
        print('lottning ej genomförd!');
        return;
      }
    }
    this.preMatch();
    print(`Lottning av rond ${this.round}`);
    document.title = `Round ${this.round + 1}`;
    start = new Date();
    net = this.makeEdges(this.persons);
    solution = this.findSolution(net);
    print('cpu:', new Date() - start, 'ms');
    print('solution', solution);
    missing = _.filter(solution, function(x) {
      return x === -1;
    });
    inactive = _.filter(this.persons.slice(0, this.persons.length - 1), function(p) {
      return !p.active;
    });
    print('lotta', missing.length, inactive.length);
    if (missing.length !== inactive.length) {
      print('Solution failed!');
      return;
    }
    this.pairs = this.unscramble(solution);
    print('pairs', this.pairs);
    this.postMatch();
    // print 'yyy',@persons
    g.pages[g.NAMES].setLista();
    g.pages[g.TABLES].setLista();
    g.pages[g.STANDINGS].setLista();
    this.downloadFile(this.makeURL(), `${this.title} R${this.round} URL.txt`);
    this.downloadFile(this.makeStandardFile(), `${this.title} R${this.round}.txt`);
    // if @round > 0 then print @makeMatrix() # skriver till debug-fönstret, time outar inte.
    // if @round > 0 then downloadFile @makeMatrix(), "#{@title} R#{@round} Matrix.txt" # (time outar, filen sparas inte)
    this.round += 1;
    print('lotta round', this.round);
    return g.state = g.TABLES;
  }

  fetchURL(url = location.search) {
    var XMAX, XMIN, a, b, getParam, i, id, k, l, len, len1, len2, len3, m, n, p, pa, pb, player, players, ref, ref1, ref2, ref3, urlParams;
    if (url === '') {
      window.location.href = "https://github.com/ChristerNilsson/Dense/blob/main/README.md";
    }
    print('fetchURL', url);
    getParam = function(name, def) {
      return urlParams.get(name) || def;
    };
    urlParams = new URLSearchParams(url);
    this.players = [];
    this.title = urlParams.get('TOUR').replaceAll('_', ' ');
    this.datum = urlParams.get('DATE') || "";
    //@rounds = parseInt urlParams.get 'ROUNDS'
    this.round = parseInt(urlParams.get('ROUND'));
    this.first = getParam('FIRST', 'bw'); // Determines if first player has white or black in the first round
    this.sp = parseFloat(getParam('SP', 0.0)); // ScorePoints
    this.tpp = parseInt(getParam('TPP', 30)); // Tables Per Page
    this.ppp = parseInt(getParam('PPP', 60)); // Players Per Page
    players = urlParams.get('PLAYERS');
    players = players.replaceAll(')(', ')|(');
    players = players.replaceAll('_', ' ');
    players = '(' + players + ')';
    players = parseExpr(players);
    print('fetchURL.players', players);
    g.N = players.length;
    if (g.N < 4) {
      print("Error: Number of players must be 4 or more!");
      return;
    }
    if (g.N > 999) {
      print("Error: Number of players must be 1999 or less!");
      return;
    }
    // g.N-- # pga BYE
    this.persons = [];
    ref = range(g.N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      player = new Player(i);
      player.read(players[i]);
      // print 'fetchURL.player',player
      this.persons.push(player);
    }
    this.paused = getParam('PAUSED', '()'); // list of zero based ids
    this.paused = parseExpr(this.paused);
    ref1 = this.paused;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      id = ref1[l];
      this.persons[id].active = false;
    }
    print('fetchURL.persons', this.persons);
    this.persons.sort(function(a, b) {
      if (a.elo !== b.elo) {
        return b.elo - a.elo;
      }
      if (a.name > b.name) {
        return 1;
      } else {
        return -1;
      }
    });
    // @persons = @persons.reverse()
    XMAX = this.persons[0].elo;
    XMIN = _.last(this.persons).elo;
    ref2 = range(g.N);
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      this.persons[i].id = i;
    }
    print((function() {
      var len3, n, ref3, results;
      ref3 = this.persons;
      results = [];
      for (n = 0, len3 = ref3.length; n < len3; n++) {
        p = ref3[n];
        results.push(p.elo);
      }
      return results;
    }).call(this));
    print('sorted players', this.persons); // by id AND descending elo
    
    // if @round == 0 then @persons.push new Player g.N, 'BYE', 0 # Frirond ska ALLTID finnas, men kanske vara inaktiv

    // @playersByName = _.sortBy @persons.slice(0, @persons.length-1), (player) -> player.name
    this.playersByName = _.sortBy(this.persons, function(player) {
      return player.name;
    });
    print('playersByName', (function() {
      var len3, n, ref3, results;
      ref3 = this.playersByName;
      results = [];
      for (n = 0, len3 = ref3.length; n < len3; n++) {
        p = ref3[n];
        results.push(p.name);
      }
      return results;
    }).call(this));
    // extract @pairs from the last round
    this.pairs = [];
    ref3 = this.persons;
    for (n = 0, len3 = ref3.length; n < len3; n++) {
      p = ref3[n];
      a = p.id;
      b = _.last(p.opp);
      if (a < b) {
        pa = this.persons[a];
        pb = this.persons[b];
        this.pairs.push('w' === _.last(p.col) ? (pa.chair = 2 * this.pairs.length, pb.chair = 2 * this.pairs.length + 1, [a, b]) : (pa.chair = 2 * this.pairs.length + 1, pb.chair = 2 * this.pairs.length, [b, a]));
      }
    }
    print('@pairs', this.pairs);
    g.pages = [new Tables(), new Names(), new Standings(), new Active()];
    g.pages[g.NAMES].setLista();
    g.pages[g.TABLES].setLista();
    return g.pages[g.STANDINGS].setLista();
  }

  makeURL() {
    var k, len, p, players, ref, res, s;
    res = [];
    //res.push "https://christernilsson.github.io/Dense"
    res.push("http://127.0.0.1:5500");
    res.push("?TOUR=" + this.title.replaceAll(' ', '_'));
    res.push("&DATE=" + "2023-11-25");
    //res.push "&ROUNDS=" + @rounds
    res.push("&ROUND=" + this.round);
    res.push("&PLAYERS=");
    players = [];
    ref = this.persons;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      s = p.write();
      players.push('(' + s + ')');
    }
    players = players.join("\n");
    res = res.concat(players);
    return res.join('\n');
  }

  makeStandardFile() {
    var a, b, header_after, header_in, i, k, len, pa, pb, players, ref, res, timestamp;
    res = [];
    players = [];
    ref = range(this.pairs.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      [a, b] = this.pairs[i];
      pa = this.persons[a];
      pb = this.persons[b];
      players.push([pa, 2 * i]);
      players.push([pb, 2 * i + 1]);
    }
    players = _.sortBy(players, function(p) {
      return p[0].name;
    });
    timestamp = new Date().toLocaleString('se-SE').slice(0, 16);
    header_after = " for " + this.title + ` after Round ${this.round}    ${timestamp}`;
    header_in = " for " + this.title + ` in Round ${this.round + 1}    ${timestamp}`;
    if (this.round < 999) {
      g.pages[g.STANDINGS].make(res, header_after);
    }
    if (this.round >= 0) {
      g.pages[g.NAMES].make(res, header_in, players);
    }
    if (this.round < 999) {
      g.pages[g.TABLES].make(res, header_in);
    }
    return res.join("\n");
  }

  distans(rounds) {
    var a, b, i, k, l, len, len1, pa, pb, ref, ref1, result;
    result = [];
    ref = range(rounds.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = rounds[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        [a, b] = ref1[l];
        pa = this.persons[a];
        pb = this.persons[b];
        if (pa.active && pb.active) {
          result.push(abs(pa.elo - pb.elo));
        }
      }
    }
    return (g.sum(result) / result.length).toFixed(2);
  }

  makeCanvas() {
    var i, k, len, line, ref, result;
    result = [];
    ref = range(g.N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      line = new Array(g.N);
      _.fill(line, '·');
      line[i] = '*';
      result.push(line);
    }
    return result;
  }

  dumpCanvas(title, average, canvas) {
    var header, i, item, k, len, nr, ordning, output, p, ref, row;
    output = ["", title];
    output.push(`Sparseness: ${average}  (Average Elo Difference) DIFF:${g.DIFF} COST:${g.COST} COLORS:${g.COLORS} SP:${this.sp}`);
    output.push("");
    header = ((function() {
      var k, len, ref, results;
      ref = range(g.N);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(str((i + 1) % 10));
      }
      return results;
    })()).join(' ');
    output.push('     ' + header + '   Elo    AED');
    ordning = (function() {
      var k, len, ref, results;
      ref = this.persons;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        p = ref[k];
        results.push(p.elo);
      }
      return results;
    }).call(this);
    ref = range(canvas.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      row = canvas[i];
      nr = str(i + 1).padStart(3);
      output.push(`${nr}  ${((function() {
        var l, len1, results;
        results = [];
        for (l = 0, len1 = row.length; l < len1; l++) {
          item = row[l];
          results.push(str(item));
        }
        return results;
      })()).join(" ")}  ${ordning[i]} ${this.persons[i].avgEloDiff().toFixed(1).padStart(6)}`);
    }
    output.push('     ' + header);
    return output.join('\n');
  }

  drawMatrix(title, rounds) {
    var a, b, canvas, i, k, l, len, len1, ref, ref1;
    canvas = this.makeCanvas();
    ref = range(rounds.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = rounds[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        [a, b] = ref1[l];
        if (this.persons[a].active && this.persons[b].active) {
          canvas[a][b] = g.ALFABET[i];
          canvas[b][a] = g.ALFABET[i];
        }
      }
    }
    return this.dumpCanvas(title, this.distans(rounds), canvas);
  }

  makeMatrix() {
    var k, l, len, len1, matrix, p, r, ref, ref1, res;
    matrix = [];
    ref = range(this.round);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      res = [];
      ref1 = this.persons;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        p = ref1[l];
        res.push([p.id, p.opp[r]]);
      }
      matrix.push(res);
    }
    return this.drawMatrix(this.title, matrix);
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\Dense\coffee\tournament.coffee