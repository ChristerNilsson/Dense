// Generated by CoffeeScript 2.7.0
import {
  g,
  print,
  range
} from './globals.js';

export var Lista = class Lista {
  constructor(objects = [], columnTitles = "", buttons = {}, drawFunction = null) { // a list of players. Or a list of pairs of players
    this.objects = objects;
    this.columnTitles = columnTitles;
    this.buttons = buttons;
    this.drawFunction = drawFunction;
    this.offset = 0;
    this.currentRow = 0;
    this.N = this.objects.length;
    this.paintYellowRow = true;
  }

  draw() { // ritar de rader som syns i f√∂nstret enbart
    var i, iRow, len, p, r, ref, results, s, y;
    y = 4.0 * g.ZOOM[g.state];
    s = this.columnTitles;
    textAlign(window.LEFT);
    text(s, 10, y);
    fill('black');
    r = g.tournament.round - 1;
    ref = range(this.offset, this.offset + g.LPP);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      iRow = ref[i];
      if (iRow >= this.N) {
        continue;
      }
      p = this.objects[iRow];
      y += g.ZOOM[g.state];
      s = this.drawFunction(p, iRow);
      if (iRow === this.currentRow) {
        fill('yellow');
        noStroke();
        if (this.paintYellowRow) {
          rect(0, y - 0.5 * g.ZOOM[g.state], width, g.ZOOM[g.state]);
        } else {
          rect(0, y - 0.5 * g.ZOOM[g.state], 0.45 * width, g.ZOOM[g.state]);
        }
        fill('black');
      }
      results.push(text(s, 10, y));
    }
    return results;
  }

  mouseWheel(event) {
    return this.move(event.delta < 0 ? -g.LPP : g.LPP);
  }

  mousePressed() {
    var button, key, ref, results;
    if (mouseY > 4 * g.ZOOM[g.state]) {
      return this.currentRow = this.offset + int(mouseY / g.ZOOM[g.state] - 4.5);
    } else {
      ref = this.buttons;
      results = [];
      for (key in ref) {
        button = ref[key];
        if (button.inside(mouseX, mouseY)) {
          results.push(button.click());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }

  keyPressed(event, key) {
    return this.buttons[key].click();
  }

  ArrowUp() {
    return this.move(-1);
  }

  ArrowDown() {
    return this.move(1);
  }

  PageUp() {
    return this.move(-g.LPP);
  }

  PageDown() {
    return this.move(g.LPP);
  }

  Home() {
    return this.move(-this.currentRow);
  }

  End() {
    return this.move(this.N - this.currentRow);
  }

  move(delta) {
    this.currentRow += delta;
    if (this.currentRow < 0) {
      this.currentRow = 0;
    }
    if (this.currentRow >= this.N) {
      this.currentRow = this.N - 1;
    }
    if (this.currentRow < this.offset) {
      this.offset = this.currentRow;
    }
    if (this.currentRow >= this.offset + g.LPP) {
      this.offset = this.currentRow - g.LPP + 1;
    }
    return event.preventDefault();
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdGEuanMiLCJzb3VyY2VSb290IjoiLi5cXCIsInNvdXJjZXMiOlsiY29mZmVlXFxsaXN0YS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUE7RUFBUyxDQUFUO0VBQVcsS0FBWDtFQUFpQixLQUFqQjtDQUFBLE1BQUE7O0FBRUEsT0FBQSxJQUFhLFFBQU4sTUFBQSxNQUFBO0VBQ04sV0FBYyxXQUFVLEVBQVYsaUJBQTRCLEVBQTVCLFlBQXlDLENBQUEsQ0FBekMsaUJBQTJELElBQTNELENBQUEsRUFBQTtJQUFDLElBQUMsQ0FBQTtJQUFZLElBQUMsQ0FBQTtJQUFpQixJQUFDLENBQUE7SUFBWSxJQUFDLENBQUE7SUFDM0QsSUFBQyxDQUFBLE1BQUQsR0FBVTtJQUNWLElBQUMsQ0FBQSxVQUFELEdBQWM7SUFDZCxJQUFDLENBQUEsQ0FBRCxHQUFLLElBQUMsQ0FBQSxPQUFPLENBQUM7SUFDZCxJQUFDLENBQUEsY0FBRCxHQUFrQjtFQUpMOztFQU1kLElBQU8sQ0FBQSxDQUFBLEVBQUE7QUFFUixRQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUE7SUFBRSxDQUFBLEdBQUksR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUg7SUFDaEIsQ0FBQSxHQUFJLElBQUMsQ0FBQTtJQUNMLFNBQUEsQ0FBVSxNQUFNLENBQUMsSUFBakI7SUFDQSxJQUFBLENBQUssQ0FBTCxFQUFPLEVBQVAsRUFBVSxDQUFWO0lBRUEsSUFBQSxDQUFLLE9BQUw7SUFDQSxDQUFBLEdBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFiLEdBQXFCO0FBQ3pCO0FBQUE7SUFBQSxLQUFBLHFDQUFBOztNQUNDLElBQUcsSUFBQSxJQUFRLElBQUMsQ0FBQSxDQUFaO0FBQW1CLGlCQUFuQjs7TUFDQSxDQUFBLEdBQUksSUFBQyxDQUFBLE9BQU8s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QUEsVUFBRCxJQUFlLElBQUMsQ0FBQSxDQUFuQjtNQUEwQixJQUFDLENBQUEsVUFBRCxHQUFjLElBQUMsQ0FBQSxDQUFELEdBQUcsRUFBM0M7O0lBQ0EsSUFBRyxJQUFDLENBQUEsVUFBRCxHQUFjLElBQUMsQ0FBQSxNQUFsQjtNQUE4QixJQUFDLENBQUEsTUFBRCxHQUFVLElBQUMsQ0FBQSxXQUF6Qzs7SUFDQSxJQUFHLElBQUMsQ0FBQSxVQUFELElBQWUsSUFBQyxDQUFBLE1BQUQsR0FBVSxDQUFDLENBQUMsR0FBOUI7TUFBdUMsSUFBQyxDQUFBLE1BQUQsR0FBVSxJQUFDLENBQUEsVUFBRCxHQUFjLENBQUMsQ0FBQyxHQUFoQixHQUFzQixFQUF2RTs7V0FDQSxLQUFLLENBQUMsY0FBTixDQUFBO0VBTk07O0FBakREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZyxwcmludCxyYW5nZSB9IGZyb20gJy4vZ2xvYmFscy5qcycgXHJcblxyXG5leHBvcnQgY2xhc3MgTGlzdGFcclxuXHRjb25zdHJ1Y3RvciA6IChAb2JqZWN0cz1bXSwgQGNvbHVtblRpdGxlcz1cIlwiLCBAYnV0dG9ucz17fSwgQGRyYXdGdW5jdGlvbj1udWxsKSAtPiAjIGEgbGlzdCBvZiBwbGF5ZXJzLiBPciBhIGxpc3Qgb2YgcGFpcnMgb2YgcGxheWVyc1xyXG5cdFx0QG9mZnNldCA9IDBcclxuXHRcdEBjdXJyZW50Um93ID0gMFxyXG5cdFx0QE4gPSBAb2JqZWN0cy5sZW5ndGhcclxuXHRcdEBwYWludFllbGxvd1JvdyA9IHRydWVcclxuXHJcblx0ZHJhdyA6IC0+ICMgcml0YXIgZGUgcmFkZXIgc29tIHN5bnMgaSBmw7Zuc3RyZXQgZW5iYXJ0XHJcblxyXG5cdFx0eSA9IDQuMCAqIGcuWk9PTVtnLnN0YXRlXVxyXG5cdFx0cyA9IEBjb2x1bW5UaXRsZXNcclxuXHRcdHRleHRBbGlnbiB3aW5kb3cuTEVGVFxyXG5cdFx0dGV4dCBzLDEwLHlcclxuXHJcblx0XHRmaWxsICdibGFjaydcclxuXHRcdHIgPSBnLnRvdXJuYW1lbnQucm91bmQgLSAxXHJcblx0XHRmb3IgaVJvdyBpbiByYW5nZSBAb2Zmc2V0LEBvZmZzZXQgKyBnLkxQUFxyXG5cdFx0XHRpZiBpUm93ID49IEBOIHRoZW4gY29udGludWVcclxuXHRcdFx0cCA9IEBvYmplY3RzW2lSb3ddXHJcblx0XHRcdHkgKz0gZy5aT09NW2cuc3RhdGVdIFxyXG5cdFx0XHRzID0gQGRyYXdGdW5jdGlvbiBwLCBpUm93XHJcblx0XHRcdGlmIGlSb3cgPT0gQGN1cnJlbnRSb3dcclxuXHRcdFx0XHRmaWxsICd5ZWxsb3cnXHJcblx0XHRcdFx0bm9TdHJva2UoKVxyXG5cdFx0XHRcdGlmIEBwYWludFllbGxvd1Jvd1xyXG5cdFx0XHRcdFx0cmVjdCAwLCB5IC0gMC41ICogZy5aT09NW2cuc3RhdGVdLCB3aWR0aCwgZy5aT09NW2cuc3RhdGVdXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0cmVjdCAwLCB5IC0gMC41ICogZy5aT09NW2cuc3RhdGVdLCAwLjQ1KndpZHRoLCBnLlpPT01bZy5zdGF0ZV1cclxuXHRcdFx0XHRmaWxsICdibGFjaydcclxuXHRcdFx0dGV4dCBzLDEwLHlcclxuXHJcblx0bW91c2VXaGVlbCA6IChldmVudCkgLT4gQG1vdmUgaWYgZXZlbnQuZGVsdGEgPCAwIHRoZW4gLWcuTFBQIGVsc2UgZy5MUFBcclxuXHJcblx0bW91c2VQcmVzc2VkIDogLT4gXHJcblx0XHRpZiBtb3VzZVkgPiA0ICogZy5aT09NW2cuc3RhdGVdXHJcblx0XHRcdEBjdXJyZW50Um93ID0gQG9mZnNldCArIGludCBtb3VzZVkgLyBnLlpPT01bZy5zdGF0ZV0gLSA0LjVcclxuXHRcdGVsc2VcclxuXHRcdFx0Zm9yIGtleSxidXR0b24gb2YgQGJ1dHRvbnNcclxuXHRcdFx0XHRpZiBidXR0b24uaW5zaWRlIG1vdXNlWCxtb3VzZVkgdGhlbiBidXR0b24uY2xpY2soKVxyXG5cclxuXHRrZXlQcmVzc2VkIDogKGV2ZW50LCBrZXkpIC0+IEBidXR0b25zW2tleV0uY2xpY2soKVxyXG5cclxuXHRBcnJvd1VwICAgOiAtPiBAbW92ZSAtMVxyXG5cdEFycm93RG93biA6IC0+IEBtb3ZlIDFcclxuXHRQYWdlVXAgICAgOiAtPiBAbW92ZSAtZy5MUFAgXHJcblx0UGFnZURvd24gIDogLT4gQG1vdmUgZy5MUFBcclxuXHRIb21lICAgICAgOiAtPiBAbW92ZSAtQGN1cnJlbnRSb3dcclxuXHRFbmQgICAgICAgOiAtPiBAbW92ZSBATiAtIEBjdXJyZW50Um93XHJcblxyXG5cdG1vdmUgOiAoZGVsdGEpIC0+XHJcblx0XHRAY3VycmVudFJvdyArPSBkZWx0YVxyXG5cdFx0aWYgQGN1cnJlbnRSb3cgPCAwIHRoZW4gQGN1cnJlbnRSb3cgPSAwXHJcblx0XHRpZiBAY3VycmVudFJvdyA+PSBATiB0aGVuIEBjdXJyZW50Um93ID0gQE4tMVxyXG5cdFx0aWYgQGN1cnJlbnRSb3cgPCBAb2Zmc2V0IHRoZW4gQG9mZnNldCA9IEBjdXJyZW50Um93XHJcblx0XHRpZiBAY3VycmVudFJvdyA+PSBAb2Zmc2V0ICsgZy5MUFAgdGhlbiBAb2Zmc2V0ID0gQGN1cnJlbnRSb3cgLSBnLkxQUCArIDFcclxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCkiXX0=
//# sourceURL=c:\github\Dense\coffee\lista.coffee