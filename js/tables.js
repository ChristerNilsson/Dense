// Generated by CoffeeScript 2.7.0
var modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  g,
  print,
  range
} from './globals.js';

import {
  Page
} from './page.js';

import {
  Button,
  spread
} from './button.js';

export var Tables = class Tables extends Page {
  constructor() {
    var h, t, y;
    super();
    this.handleResult = this.handleResult.bind(this);
    t = g.tournament;
    y = 1.4 * g.ZOOM[g.state];
    h = 20;
    this.currentTable = 0;
    this.buttons = {};
    this.buttons.t = new Button('Tables', 'Shows all the table', () => {
      return g.setState(TABLES);
    });
    this.buttons.n = new Button('Names', 'N = Shows names alphabetically', () => {
      return g.setState(NAMES);
    });
    this.buttons.s = new Button('Standings', 'S = Shows the standings', () => {
      return g.setState(STANDINGS);
    });
    this.buttons.p = new Button('Pairings', 'P = pause/activate and pair', () => {
      return g.setState(PAIRINGS);
    });
    this.buttons.K1 = new Button('1', '1 = White Win', () => {
      return this.handleResult(t, '1');
    });
    this.buttons[' '] = new Button('Â½', 'space = Draw', () => {
      return this.handleResult(t, ' ');
    });
    this.buttons.K0 = new Button('0', '0 = White Loss', () => {
      return this.handleResult(t, '0');
    });
    this.buttons.Delete = new Button('Del', 'delete = Remove result', () => {
      return this.handleDelete(t);
    });
    this.buttons.i = new Button('I', 'I = zoom In', () => {
      return g.zoomIn(Math.floor(N / 2));
    });
    this.buttons.o = new Button('O', 'O = zoom Out', () => {
      return g.zoomOut(Math.floor(N / 2));
    });
    this.buttons.r = new Button('R', 'R = Random results', () => {
      return this.fakeInput();
    });
    this.buttons.Home = new Button('', '', () => {
      return this.currentTable = 0;
    });
    this.buttons.End = new Button('', '', () => {
      return this.currentTable = g.tournament.pairs.length - 1;
    });
    this.buttons.ArrowLeft = new Button('', '', () => {
      return g.setState(PAIRINGS);
    });
    this.buttons.ArrowRight = new Button('', '', () => {
      return g.setState(NAMES);
    });
    this.buttons.ArrowUp = new Button('', '', () => {
      this.currentTable = modulo(this.currentTable - 1, g.tournament.pairs.length);
      return event.preventDefault();
    });
    this.buttons.ArrowDown = new Button('', '', () => {
      this.currentTable = modulo(this.currentTable + 1, g.tournament.pairs.length);
      return event.preventDefault();
    });
    this.buttons.t.active = false;
    spread(this.buttons, 0.6 * g.ZOOM[g.state], y, h);
  }

  mousePressed() {
    var button, key, results;
    if (mouseY > 4 * g.ZOOM[g.state]) {
      return this.currentTable = int(mouseY / g.ZOOM[g.state] - 4.5);
    } else {
      results = [];
      for (key in this.buttons) {
        button = this.buttons[key];
        if (button.inside(mouseX, mouseY)) {
          results.push(button.click());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }

  keyPressed(event, key) {
    if (indexOf.call('01', key) >= 0) {
      key = 'K' + key;
    }
    if (!(key in this.buttons)) {
      return;
    }
    return this.buttons[key].click();
  }

  elo_probabilities(R_W, R_B, draw = 0.2) {
    var E_W, index, loss, win, x;
    E_W = 1 / (1 + 10 ** ((R_B - R_W) / 400));
    win = E_W - draw / 2;
    loss = (1 - E_W) - draw / 2;
    x = _.random(0, 1, true);
    index = 2;
    if (x < loss + draw) {
      index = 1;
    }
    if (x < loss) {
      index = 0;
    }
    return index;
  }

  handleResult(t, key) {
    var a, b, ch, index, pa, pb;
    boundMethodCheck(this, Tables);
    [a, b] = t.pairs[this.currentTable];
    pa = t.persons[a];
    pb = t.persons[b];
    index = '0 1'.indexOf(key);
    ch = "012"[index];
    if (pa.res.length === pa.col.length) {
      if (ch !== _.last(pa.res)) {
        errors.push(this.currentTable);
        print('errors', errors);
      }
    } else {
      if (pa.res.length < pa.col.length) {
        pa.res += "012"[index];
      }
      if (pb.res.length < pb.col.length) {
        pb.res += "210"[index];
      }
    }
    return this.currentTable = modulo(this.currentTable + 1, g.tournament.pairs.length);
  }

  fakeInput() {
    var a, b, currentTable, i, j, len, pa, pb, ref, res, results;
    currentTable = 0;
    ref = range(g.tournament.pairs.length);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      [a, b] = g.tournament.pairs[i];
      pa = g.tournament.persons[a];
      pb = g.tournament.persons[b];
      res = this.elo_probabilities(pa.elo, pb.elo);
      if (pa.res.length < pa.col.length) {
        pa.res += "012"[res];
      }
      if (pb.res.length < pb.col.length) {
        results.push(pb.res += "210"[res]);
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  handleDelete() {
    var a, b, e, errors, i, pa, pb;
    [a, b] = g.tournament.pairs[this.currentTable];
    pa = g.tournament.persons[a];
    pb = g.tournament.persons[b];
    i = this.currentTable;
    errors = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = errors.length; j < len; j++) {
        e = errors[j];
        if (e !== i) {
          results.push(e);
        }
      }
      return results;
    })();
    if (pa.res.length === pb.res.length) {
      [a, b] = g.tournament.pairs[i];
      pa = g.tournament.persons[a];
      pb = g.tournament.persons[b];
      pa.res = pa.res.substring(0, pa.res.length - 1);
      pb.res = pb.res.substring(0, pb.res.length - 1);
    }
    return this.currentTable = modulo(this.currentTable + 1, g.tournament.pairs.length);
  }

  make(header, res) {
    var a, b, i, j, len, pa, pb, ref, results;
    res.push("TABLES" + header);
    res.push("");
    ref = range(g.tournament.pairs.length);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      [a, b] = g.tournament.pairs[i];
      if (i % g.tournament.tpp === 0) {
        res.push(`Table      ${RINGS.w}`.padEnd(25) + _.pad("", 28 + 10) + `${RINGS.b}`);
      }
      pa = g.tournament.persons[a];
      pb = g.tournament.persons[b];
      res.push("");
      res.push(_.pad(i + 1, 6) + pa.elo + ' ' + g.txtT(pa.name, 25, window.LEFT) + ' ' + _.pad("|____| - |____|", 20) + ' ' + pb.elo + ' ' + g.txtT(pb.name, 25, window.LEFT));
      if (i % g.tournament.tpp === g.tournament.tpp - 1) {
        results.push(res.push("\f"));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  draw() {
    var a, b, both, button, i, j, key, len, nr, pa, pb, ref, results, s, y;
    fill('white');
    this.showHeader(g.tournament.round);
    for (key in this.buttons) {
      button = this.buttons[key];
      button.draw();
    }
    y = 4.0 * g.ZOOM[g.state];
    s = "";
    s += g.txtT('Tbl', 3, window.RIGHT);
    s += ' ' + g.txtT('Elo', 4, window.RIGHT);
    s += ' ' + g.txtT('White', 25, window.LEFT);
    s += ' ' + g.txtT('Result', 7, window.CENTER);
    s += ' ' + g.txtT('Black', 25, window.LEFT);
    s += ' ' + g.txtT('Elo', 4, window.RIGHT);
    textAlign(window.LEFT);
    text(s, 10, y);
    ref = range(g.tournament.pairs.length);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      [a, b] = g.tournament.pairs[i];
      a = g.tournament.persons[a];
      b = g.tournament.persons[b];
      y += g.ZOOM[g.state];
      pa = myRound(a.score(), 1);
      pb = myRound(b.score(), 1);
      both = a.res.length === a.col.length ? prBoth(_.last(a.res)) : "   -   ";
      nr = i + 1;
      s = "";
      s += g.txtT(nr.toString(), 3, window.RIGHT);
      s += ' ' + g.txtT(a.elo.toString(), 4, window.RIGHT);
      s += ' ' + g.txtT(a.name, 25, window.LEFT);
      s += ' ' + g.txtT(both, 7, window.CENTER);
      s += ' ' + g.txtT(b.name, 25, window.LEFT);
      s += ' ' + g.txtT(b.elo.toString(), 4, window.RIGHT);
      if (i === this.currentTable) {
        fill('yellow');
        noStroke();
        rect(0, y - 0.6 * g.ZOOM[g.state], width, g.ZOOM[g.state]);
        fill('black');
      } else {
        if (indexOf.call(errors, i) >= 0) {
          fill('red');
        } else {
          fill('black');
        }
      }
      results.push(text(s, 10, y));
    }
    return results;
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\Dense\coffee\tables.coffee