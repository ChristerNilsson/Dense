// Generated by CoffeeScript 2.7.0
var boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } },
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  g,
  print,
  range,
  scale
} from './globals.js';

import {
  Page
} from './page.js';

import {
  Button,
  spread
} from './button.js';

import {
  Lista
} from './lista.js';

export var Tables = class Tables extends Page {
  constructor() {
    super();
    this.setLista = this.setLista.bind(this);
    this.handleResult = this.handleResult.bind(this);
    // @t = g.tournament
    // @y = 1.3
    // @h = 1
    // @lista = new Lista
    this.errors = [];
    this.buttons.ArrowLeft = new Button('', '', () => {
      return g.setState(g.ACTIVE);
    });
    this.buttons.ArrowRight = new Button('', '', () => {
      return g.setState(g.NAMES);
    });
    this.buttons.p = new Button('Pair', 'P = Perform pairing now', () => {
      return this.t.lotta();
    });
    this.buttons.K1 = new Button('1', '1 = White Win', () => {
      return this.handleResult('1');
    });
    this.buttons[' '] = new Button('Â½', 'space = Draw', () => {
      return this.handleResult(' ');
    });
    this.buttons.K0 = new Button('0', '0 = White Loss', () => {
      return this.handleResult('0');
    });
    this.buttons.Delete = new Button('Delete', 'delete = Remove result', () => {
      return this.handleDelete();
    });
    this.buttons.r = new Button('Random', 'R = Random results', () => {
      return this.randomResult();
    });
    this.buttons.t.active = false;
    print(this.buttons);
    this.setLista();
  }

  setLista() {
    var header;
    boundMethodCheck(this, Tables);
    print('Lista', this.t.pairs.length);
    header = "";
    header += g.txtT('Tbl', 3, window.RIGHT);
    header += ' ' + g.txtT('Elo', 4, window.RIGHT);
    header += ' ' + g.txtT('White', 25, window.LEFT);
    header += ' ' + g.txtT('Result', 7, window.CENTER);
    header += ' ' + g.txtT('Black', 25, window.LEFT);
    header += ' ' + g.txtT('Elo', 4, window.RIGHT);
    this.lista = new Lista(this.t.pairs, header, this.buttons, (pair, index) => {
      var a, b, both, nr, pa, pb, s;
      [a, b] = pair;
      pa = this.t.persons[a];
      pb = this.t.persons[b];
      both = pa.res.length === pa.col.length ? g.prBoth(_.last(pa.res)) : "   -   ";
      nr = index + 1;
      s = "";
      s += g.txtT(nr.toString(), 3, window.RIGHT);
      s += ' ' + g.txtT(pa.elo.toString(), 4, window.RIGHT);
      s += ' ' + g.txtT(pa.name, 25, window.LEFT);
      s += ' ' + g.txtT(both, 7, window.CENTER);
      s += ' ' + g.txtT(pb.name, 25, window.LEFT);
      s += ' ' + g.txtT(pb.elo.toString(), 4, window.RIGHT);
      return s;
    });
    // spread @buttons, 0.6 * g.ZOOM[g.state], @y, @h
    spread(this.buttons, 10, this.y, this.h);
    return g.calcMissing();
  }

  mouseWheel(event) {
    return this.lista.mouseWheel(event);
  }

  mousePressed(event) {
    return this.lista.mousePressed(event);
  }

  keyPressed(event, key) {
    return this.buttons[key].click();
  }

  draw() {
    var button, key, ref;
    fill('white');
    this.showHeader(this.t.round);
    ref = this.buttons;
    for (key in ref) {
      button = ref[key];
      button.draw();
    }
    return this.lista.draw();
  }

  elo_probabilities(R_W, R_B, draw = 0.2) {
    var E_W, index, loss, win, x;
    E_W = 1 / (1 + 10 ** ((R_B - R_W) / 400));
    win = E_W - draw / 2;
    loss = (1 - E_W) - draw / 2;
    x = _.random(0, 1, true);
    index = 2;
    if (x < loss + draw) {
      index = 1;
    }
    if (x < loss) {
      index = 0;
    }
    return index;
  }

  handleResult(key) {
    var a, b, ch, index, pa, pb;
    boundMethodCheck(this, Tables);
    [a, b] = this.t.pairs[this.lista.currentRow];
    pa = this.t.persons[a];
    pb = this.t.persons[b];
    index = '0 1'.indexOf(key);
    ch = "012"[index];
    if (pa.res.length === pa.col.length) {
      if (ch !== _.last(pa.res)) {
        this.errors.push(this.lista.currentRow);
        print('errors', this.errors);
      }
    } else {
      if (pa.res.length < pa.col.length) {
        pa.res += "012"[index];
      }
      if (pb.res.length < pb.col.length) {
        pb.res += "210"[index];
      }
    }
    g.calcMissing();
    return this.lista.currentRow = modulo(this.lista.currentRow + 1, this.t.pairs.length);
  }

  randomResult() {
    var a, b, i, j, len, pa, pb, ref, res;
    ref = range(this.t.pairs.length);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      [a, b] = this.t.pairs[i];
      pa = this.t.persons[a];
      pb = this.t.persons[b];
      res = this.elo_probabilities(pa.elo, pb.elo);
      if (pa.res.length < pa.col.length) {
        pa.res += "012"[res];
      }
      if (pb.res.length < pb.col.length) {
        pb.res += "210"[res];
      }
    }
    return g.calcMissing();
  }

  handleDelete() {
    var a, b, e, i, pa, pb;
    i = this.lista.currentRow;
    [a, b] = this.t.pairs[i];
    pa = this.t.persons[a];
    pb = this.t.persons[b];
    this.errors = (function() {
      var j, len, ref, results;
      ref = this.errors;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        e = ref[j];
        if (e !== i) {
          results.push(e);
        }
      }
      return results;
    }).call(this);
    if (pa.res.length === pb.res.length) {
      [a, b] = this.t.pairs[i];
      pa = this.t.persons[a];
      pb = this.t.persons[b];
      pa.res = pa.res.substring(0, pa.res.length - 1);
      pb.res = pb.res.substring(0, pb.res.length - 1);
    }
    this.lista.currentRow = modulo(this.lista.currentRow + 1, this.t.pairs.length);
    return g.calcMissing();
  }

  make(header, res) {
    var a, b, i, j, len, pa, pb, ref, results;
    res.push("TABLES" + header);
    res.push("");
    ref = range(this.t.pairs.length);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      [a, b] = this.t.pairs[i];
      if (i % this.t.tpp === 0) {
        res.push(`Table      ${g.RINGS.w}`.padEnd(25) + _.pad("", 28 + 10) + `${g.RINGS.b}`);
      }
      pa = this.t.persons[a];
      pb = this.t.persons[b];
      res.push("");
      res.push(_.pad(i + 1, 6) + pa.elo + ' ' + g.txtT(pa.name, 25, window.LEFT) + ' ' + _.pad("|____| - |____|", 20) + ' ' + pb.elo + ' ' + g.txtT(pb.name, 25, window.LEFT));
      if (i % this.t.tpp === this.t.tpp - 1) {
        results.push(res.push("\f"));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\Dense\coffee\page_tables.coffee