// Generated by CoffeeScript 2.7.0
var modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  g,
  print,
  range
} from './globals.js';

import {
  Page
} from './page.js';

import {
  Button,
  spread
} from './button.js';

export var Names = class Names extends Page {
  constructor() {
    var h, t, y;
    super();
    t = g.tournament;
    y = 1.4 * g.ZOOM[g.state];
    h = 20;
    this.currentPlayer = 0;
    this.buttons = {};
    this.buttons.t = new Button('Tables', 'T = Tables', () => {
      return setState(0);
    });
    this.buttons.n = new Button('Names', 'Names', () => {
      return setState(1); 
    });
    this.buttons.s = new Button('Standings', 'S = Standings', () => {
      return setState(2);
    });
    this.buttons.p = new Button('Pairings', 'P = pause/activate and pair', () => {
      return setState(3);
    });
    this.buttons.i = new Button('I', 'I = zoom In', () => {
      return zoomIn(N);
    });
    this.buttons.o = new Button('O', 'O = zoom Out', () => {
      return zoomOut(N);
    });
    this.buttons.ArrowLeft = new Button('', '', () => {
      return setState(0);
    });
    this.buttons.ArrowRight = new Button('', '', () => {
      return setState(2);
    });
    this.buttons.ArrowUp = new Button('', '', () => {
      this.currentPlayer = modulo(this.currentPlayer - 1, N);
      return event.preventDefault();
    });
    this.buttons.ArrowDown = new Button('', '', () => {
      this.currentPlayer = modulo(this.currentPlayer + 1, N);
      return event.preventDefault();
    });
    this.buttons.n.active = false;
    spread(this.buttons, 0.6 * g.ZOOM[g.state], y, h);
  }

  mousePressed() {
    var button, key, results;
    if (mouseY > 4 * g.ZOOM[g.state]) {
      return this.currentPlayer = int(mouseY / g.ZOOM[g.state] - 4.5);
    } else {
      results = [];
      for (key in this.buttons) {
        button = this.buttons[key];
        if (button.inside(mouseX, mouseY)) {
          results.push(button.click());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }

  keyPressed(event, key) {
    return this.buttons[key].click();
  }

  make(header, players, res) { // players sorterad p√• namn
    var i, j, k, len, len1, p, r, temp;
    temp = _.clone(players);
    temp.sort(function(a, b) {
      return b[0].eloSum() - a[0].eloSum();
    });
    for (i = j = 0, len = temp.length; j < len; i = ++j) {
      p = temp[i];
      p[0].position = "";
      if (p[0].eloSum() > 0) {
        p[0].position = `#${i + 1}`;
      }
    }
    res.push("NAMES" + header);
    res.push("");
    r = g.tournament.round;
    for (i = k = 0, len1 = players.length; k < len1; i = ++k) {
      p = players[i];
      if (i % this.ppp === 0) {
        res.push("Table Name");
      }
      res.push(`${str(1 + Math.floor(p[1] / 2)).padStart(3)} ${RINGS[p[0].col[r][0]]} ${p[0].name} ${p[0].position}`);
      if (i % this.ppp === this.ppp - 1) {
        res.push("\f");
      }
    }
    return res.push("\f");
  }

  draw() {
    var button, i, j, k, key, len, len1, p, player, playersByEloSum, r, ref, results, s, y;
    fill('white');
    this.showHeader(g.tournament.round);
    y = 4.0 * g.ZOOM[g.state];
    s = "";
    s += g.txtT('Table', 6, window.LEFT);
    s += g.txtT('Name', 25, window.LEFT);
    s += g.txtT('Pos', 4, window.RIGHT);
    textAlign(window.LEFT);
    text(s, 10, y);
    playersByEloSum = _.clone(g.tournament.persons);
    playersByEloSum.sort(function(a, b) {
      return b.eloSum() - a.eloSum();
    });
    for (i = j = 0, len = playersByEloSum.length; j < len; i = ++j) {
      player = playersByEloSum[i];
      p = g.tournament.persons[player.id];
      p.position = "";
      if (p.eloSum() > 0) {
        p.position = `${i + 1}`;
      }
    }
    fill('black');
    r = g.tournament.round - 1;
    ref = g.tournament.playersByName;
    for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
      p = ref[i];
      y += g.ZOOM[g.state];
      s = "";
      if (g.tournament.round === 0) {
        s += p.active ? '      ' : ' paus ';
        s += g.txtT(p.name, 25, window.LEFT);
      } else {
        if (p.active && p.name !== 'BYE') {
          s += g.txtT((1 + Math.floor(p.chair / 2)).toString(), 3, window.RIGHT);
          s += g.txtT(RINGS[p.col[r][0]], 3, window.CENTER);
          s += g.txtT(p.name, 25, window.LEFT);
          s += g.txtT(p.position.toString(), 4, window.RIGHT);
        } else {
          s += '      ';
          s += g.txtT(p.name, 25, window.LEFT);
        }
      }
      if (i === this.currentPlayer) {
        fill('yellow');
        noStroke();
        rect(0, y - 0.6 * g.ZOOM[g.state], width, g.ZOOM[g.state]);
        fill('black');
      }
      text(s, 10, y);
    }
    results = [];
    for (key in this.buttons) {
      button = this.buttons[key];
      results.push(button.draw());
    }
    return results;
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\Dense\coffee\names.coffee