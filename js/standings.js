// Generated by CoffeeScript 2.7.0
import {
  g,
  print,
  range
} from './globals.js';

import {
  Page
} from './page.js';

import {
  Button,
  spread
} from './button.js';

export var Standings = class Standings extends Page {
  constructor() {
    var h, t, y;
    super();
    t = g.tournament;
    y = 1.4 * g.ZOOM[g.state];
    h = 20;
    this.buttons = {};
    this.buttons.t = new Button('Tables', 'T = Tables', () => {
      return g.setState(0);
    });
    this.buttons.n = new Button('Names', 'N = Names', () => {
      return g.setState(1);
    });
    this.buttons.s = new Button('Standings', 'Standings', () => {
      return g.setState(2);
    });
    this.buttons.p = new Button('Pairings', 'P = pause/activate and pair', () => {
      return g.setState(3);
    });
    this.buttons.i = new Button('I', 'I = zoom In', () => {
      return g.zoomIn(N);
    });
    this.buttons.o = new Button('O', 'O = zoom Out', () => {
      return g.zoomOut(N);
    });
    this.buttons.ArrowLeft = new Button('', '', () => {
      return g.setState(1);
    });
    this.buttons.ArrowRight = new Button('', '', () => {
      return g.setState(3);
    });
    this.buttons.s.active = false;
    spread(this.buttons, 0.6 * g.ZOOM[g.state], y, h);
  }

  mousePressed() {
    var button, key, results;
    results = [];
    for (key in this.buttons) {
      button = this.buttons[key];
      if (button.inside(mouseX, mouseY)) {
        results.push(button.click());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  keyPressed(event, key) {
    return this.buttons[key].click();
  }

  make(header, res) {
    var elo, i, inv, j, k, key, l, len, len1, len2, len3, m, p, person, r, ref, ref1, ref2, s, temp, terms;
    if (g.tournament.pairs.length === 0) {
      res.push("This ROUND can't be paired! (Too many rounds)");
    }
    temp = _.clone(g.tournament.persons);
    temp.sort(function(a, b) {
      var diff;
      diff = b.eloSum() - a.eloSum();
      if (diff !== 0) {
        return diff;
      }
      return b.elo - a.elo;
    });
    inv = invert((function() {
      var j, len, results;
      results = [];
      for (j = 0, len = temp.length; j < len; j++) {
        p = temp[j];
        results.push(p.id);
      }
      return results;
    })());
    res.push("STANDINGS" + header);
    res.push("");
    header = "";
    header += g.txtT("#", 2);
    header += ' ' + g.txtT("Elo", 4, window.RIGHT);
    header += ' ' + g.txtT("Name", 25, window.LEFT);
    ref = range(g.tournament.round);
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      header += g.txtT(`${r + 1}`, 6, window.RIGHT);
    }
    header += '  ' + g.txtT("EloSum", 8, window.RIGHT);
    if (g.tournament.round <= this.expl) {
      header += '  ' + g.txtT("Explanation", 12, window.LEFT);
    }
    for (i = k = 0, len1 = temp.length; k < len1; i = ++k) {
      person = temp[i];
      if (i % g.tournament.ppp === 0) {
        res.push(header);
      }
      s = "";
      s += g.txtT((1 + i).toString(), 2, window.RIGHT);
      s += ' ' + g.txtT(person.elo.toString(), 4, window.RIGHT);
      s += ' ' + g.txtT(person.name, 25, window.LEFT);
      s += ' ';
      ref1 = range(g.tournament.round);
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        r = ref1[l];
        if (person.opp[r] === -1) {
          s += '      ';
        } else {
          s += g.txtT(`${1 + inv[person.opp[r]]}${RINGS[person.col[r][0]]}${"0Â½1"[person.res[r]]}`, 6, window.RIGHT);
        }
      }
      s += ' ' + g.txtT(person.eloSum().toFixed(1), 8, window.RIGHT);
      terms = [];
      print('expl', g.tournament.round, this.expl, g.tournament.round < this.expl);
      if (g.tournament.round <= this.expl) {
        ref2 = range(g.tournament.round);
        for (m = 0, len3 = ref2.length; m < len3; m++) {
          r = ref2[m];
          if (person.opp[r] === -1) {
            terms.push("0 * 0");
          } else {
            key = person.col[r][0] + person.res[r];
            elo = this.persons[person.opp[r]].elo;
            terms.push(`${g.tournament.bonus[key]} * ${elo}`);
          }
        }
        s += '  (' + terms.join(' + ') + ')';
      }
      res.push(s);
      if (i % g.tournament.ppp === g.tournament.ppp - 1) {
        res.push("\f");
      }
    }
    return res.push("\f");
  }

  lightbulb(color, x, y, result, opponent) {
    var strokeWeight;
    if (result === "") {
      return;
    }
    push();
    result = '012'.indexOf(result);
    fill('red gray green'.split(' ')[result]);
    rectMode(window.CENTER);
    rect(x, y, 0.84 * g.ZOOM[g.state], 0.9 * g.ZOOM[g.state]);
    fill({
      b: 'black',
      ' ': 'yellow',
      w: 'white'
    }[color]);
    noStroke();
    strokeWeight = 0;
    this.txt(opponent, x, y + 1, window.CENTER);
    return pop();
  }

  draw() {
    var button, i, inv, j, k, key, len, len1, p, person, playersByEloSum, r, ref, results, rheader, s, x, y;
    noStroke();
    fill('white');
    this.showHeader(g.tournament.round - 1);
    // if g.tournament.pairs.length == 0
    // 	print "This ROUND can't be paired! (Too many rounds)"
    // 	return
    playersByEloSum = _.clone(g.tournament.persons.slice(0, N));
    playersByEloSum.sort(function(a, b) {
      var diff;
      diff = b.eloSum() - a.eloSum();
      if (diff !== 0) {
        return diff;
      }
      return b.elo - a.elo;
    });
    inv = invert((function() {
      var j, len, results;
      results = [];
      for (j = 0, len = playersByEloSum.length; j < len; j++) {
        p = playersByEloSum[j];
        results.push(p.id);
      }
      return results;
    })());
    y = 4.0 * g.ZOOM[g.state];
    textAlign(LEFT);
    rheader = _.map(range(1, g.tournament.rounds + 1), function(i) {
      return `${i % 10} `;
    });
    rheader = rheader.join(' ');
    s = "";
    s += g.txtT("Pos", 3, window.RIGHT);
    s += ' ' + g.txtT("Elo", 4, window.RIGHT);
    s += ' ' + g.txtT("Name", 25, window.LEFT);
    s += ' ' + g.txtT(rheader, 3 * this.rounds, window.LEFT);
    s += ' ' + g.txtT("EloSum", 7, window.RIGHT);
    text(s, 10, y);
    fill('black');
    for (i = j = 0, len = playersByEloSum.length; j < len; i = ++j) {
      person = playersByEloSum[i];
      // print "Standings.draw: #{person}"
      y += g.ZOOM[g.state];
      s = "";
      s += g.txtT((1 + i).toString(), 3, window.RIGHT);
      s += ' ' + g.txtT(person.elo.toString(), 4, window.RIGHT);
      s += ' ' + g.txtT(person.name, 25, window.LEFT);
      s += ' ' + g.txtT('', 3 * g.tournament.rounds, window.CENTER);
      s += ' ' + g.txtT(person.eloSum().toFixed(1), 7, window.RIGHT);
      text(s, 10, y);
      ref = range(g.tournament.round - 1);
      for (k = 0, len1 = ref.length; k < len1; k++) {
        r = ref[k];
        x = g.ZOOM[g.state] * (10.85 + 0.9 * r);
        if (person.opp[r] === -1) {
          this.txt("P", x, y + 1, window.CENTER, 'black');
        } else if (person.opp[r] === N) {
          this.txt("BYE", x, y + 1, window.CENTER, 'black');
        } else {
          this.lightbulb(person.col[r][0], x, y, person.res[r], 1 + inv[person.opp[r]]);
        }
      }
    }
    results = [];
    for (key in this.buttons) {
      button = this.buttons[key];
      results.push(button.draw());
    }
    return results;
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\Dense\coffee\standings.coffee