// Generated by CoffeeScript 2.7.0
import {
  g,
  print,
  range
} from './globals.js';

import {
  Page
} from './page.js';

import {
  Button,
  spread
} from './button.js';

import {
  Lista
} from './lista.js';

export var Standings = class Standings extends Page {
  constructor() {
    var p;
    super();
    this.t = g.tournament;
    this.y = 1.3 * g.ZOOM[g.state];
    this.h = 20;
    this.lista = new Lista();
    this.buttons.ArrowLeft = new Button('', '', () => {
      return g.setState(g.NAMES);
    });
    this.buttons.ArrowRight = new Button('', '', () => {
      return g.setState(g.PAIRINGS);
    });
    this.buttons.s.active = false;
    this.playersByEloSum = _.clone(this.t.persons.slice(0, g.N));
    this.playersByEloSum.sort(function(a, b) {
      var diff;
      diff = b.eloSum() - a.eloSum();
      if (diff !== 0) {
        return diff;
      }
      return b.elo - a.elo;
    });
    this.inv = g.invert((function() {
      var j, len, ref, results;
      ref = this.playersByEloSum;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        results.push(p.id);
      }
      return results;
    }).call(this));
    spread(this.buttons, 0.6 * g.ZOOM[g.state], this.y, this.h);
  }

  setLista() {
    var header, rheader;
    rheader = _.map(range(1, this.t.rounds + 1), function(i) {
      return `${i % 10} `;
    });
    rheader = rheader.join(' ');
    header = "";
    header += g.txtT("Pos", 3, window.RIGHT);
    header += ' ' + g.txtT("Elo", 4, window.RIGHT);
    header += ' ' + g.txtT("Name", 25, window.LEFT);
    header += ' ' + g.txtT(rheader, 3 * this.rounds, window.LEFT);
    header += ' ' + g.txtT("EloSum", 7, window.RIGHT);
    this.lista = new Lista(this.playersByEloSum, header, this.buttons, (p, index) => { // returnera strängen som ska skrivas ut. Dessutom ritas lightbulbs här.
      var j, len, r, ref, s, x;
      this.y = (5 + index - this.lista.offset) * g.ZOOM[g.state];
      textAlign(LEFT);
      fill('black');
      s = "";
      s += g.txtT((1 + index).toString(), 3, window.RIGHT);
      s += ' ' + g.txtT(p.elo.toString(), 4, window.RIGHT);
      s += ' ' + g.txtT(p.name, 25, window.LEFT);
      s += ' ' + g.txtT('', 3 * g.tournament.rounds, window.CENTER);
      s += ' ' + g.txtT(p.eloSum().toFixed(1), 7, window.RIGHT);
      ref = range(p.res.length);
      for (j = 0, len = ref.length; j < len; j++) {
        r = ref[j];
        x = g.ZOOM[g.state] * (21.85 + 1.8 * r);
        if (p.opp[r] === -1) {
          this.txt("P", x, this.y + 1, window.CENTER, 'black');
        } else if (p.opp[r] === g.N) {
          this.txt("BYE", x, this.y + 1, window.CENTER, 'black');
        } else {
          this.lightbulb(p.col.slice(r, r + 1), x, this.y, p.res.slice(r, r + 1), 1 + this.inv[p.opp[r]]);
        }
      }
      return s;
    });
    return this.lista.paintYellowRow = false;
  }

  mouseWheel(event) {
    return this.lista.mouseWheel(event);
  }

  mousePressed(event) {
    return this.lista.mousePressed(event);
  }

  keyPressed(event) {
    return this.buttons[key].click();
  }

  draw() {
    var button, key, ref, results;
    noStroke();
    fill('white');
    this.showHeader(g.tournament.round - 1);
    this.lista.draw();
    ref = this.buttons;
    results = [];
    for (key in ref) {
      button = ref[key];
      results.push(button.draw());
    }
    return results;
  }

  lightbulb(color, x, y, result, opponent) {
    var strokeWeight;
    if (result === "") {
      return;
    }
    push();
    result = '012'.indexOf(result);
    fill('red gray green'.split(' ')[result]);
    rectMode(window.CENTER);
    rect(x, y, 1.6 * g.ZOOM[g.state], 0.9 * g.ZOOM[g.state]);
    fill({
      b: 'black',
      ' ': 'yellow',
      w: 'white'
    }[color]);
    noStroke();
    strokeWeight = 0;
    this.txt(opponent, x, y + 1, window.CENTER);
    return pop();
  }

  make(header, res) {
    var elo, i, inv, j, k, key, l, len, len1, len2, len3, m, p, person, r, ref, ref1, ref2, s, temp, terms;
    return;
    if (g.tournament.pairs.length === 0) {
      res.push("This ROUND can't be paired! (Too many rounds)");
    }
    temp = _.clone(g.tournament.persons);
    temp.sort(function(a, b) {
      var diff;
      diff = b.eloSum() - a.eloSum();
      if (diff !== 0) {
        return diff;
      }
      return b.elo - a.elo;
    });
    inv = g.invert((function() {
      var j, len, results;
      results = [];
      for (j = 0, len = temp.length; j < len; j++) {
        p = temp[j];
        results.push(p.id);
      }
      return results;
    })());
    res.push("STANDINGS" + header);
    res.push("");
    header = "";
    header += g.txtT("#", 2);
    header += ' ' + g.txtT("Elo", 4, window.RIGHT);
    header += ' ' + g.txtT("Name", 25, window.LEFT);
    ref = range(g.tournament.round);
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      header += g.txtT(`${r + 1}`, 6, window.RIGHT);
    }
    header += '  ' + g.txtT("EloSum", 8, window.RIGHT);
    if (g.tournament.round <= this.expl) {
      header += '  ' + g.txtT("Explanation", 12, window.LEFT);
    }
    for (i = k = 0, len1 = temp.length; k < len1; i = ++k) {
      person = temp[i];
      if (i % g.tournament.ppp === 0) {
        res.push(header);
      }
      s = "";
      s += g.txtT((1 + i).toString(), 2, window.RIGHT);
      s += ' ' + g.txtT(person.elo.toString(), 4, window.RIGHT);
      s += ' ' + g.txtT(person.name, 25, window.LEFT);
      s += ' ';
      ref1 = range(g.tournament.round);
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        r = ref1[l];
        if (person.opp[r] === -1) {
          s += '      ';
        } else {
          s += g.txtT(`${1 + inv[person.opp[r]]}${g.RINGS[person.col[r][0]]}${"0½1"[person.res[r]]}`, 6, window.RIGHT);
        }
      }
      s += ' ' + g.txtT(person.eloSum().toFixed(1), 8, window.RIGHT);
      terms = [];
      print('expl', g.tournament.round, this.expl, g.tournament.round < this.expl);
      if (g.tournament.round <= this.expl) {
        ref2 = range(g.tournament.round);
        for (m = 0, len3 = ref2.length; m < len3; m++) {
          r = ref2[m];
          if (person.opp[r] === -1) {
            terms.push("0 * 0");
          } else {
            key = person.col[r][0] + person.res[r];
            elo = this.persons[person.opp[r]].elo;
            terms.push(`${g.tournament.bonus[key]} * ${elo}`);
          }
        }
        s += '  (' + terms.join(' + ') + ')';
      }
      res.push(s);
      if (i % g.tournament.ppp === g.tournament.ppp - 1) {
        res.push("\f");
      }
    }
    return res.push("\f");
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\Dense\coffee\standings.coffee